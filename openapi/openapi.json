{
  "openapi": "3.0.3",
  "info": {
    "title": "o2r web api",
    "description": "## About\n\nThe o2r web API acts as the interface between the o2r microservices and the web interface.\n\nThe API provides services around the executable research compendium (ERC), or \"compendium\" for short, which is documented in the ERC spec.\n\nA good starting point for understanding the different parts of the API is the compendium life-cycle.\n\n---\n## Citation\n\nTo cite this specification please use\n\n>_Nüst, Daniel, 2018. Reproducibility Service for Executable Research Compendia: Technical Specifications and Reference Implementation. Zenodo. doi:10.5281/zenodo.2203844_\n\nFor a complete list of publications, posters, presentations, and software projects from th2 o2r project please visit https://o2r.info/results/.\n\n---\n## General\n\nThe API is implemented as a RESTful API. The entrypoint for the current version is /api/v1.\n\nUnless specified otherwise, responses are always in JSON format. Body parameters in `POST` requests are expected in `multipart/form-data format.` Requests to the API should always be made with a secure connection using  `HTTPS`. Some requests require authentication with a specific user level.\n\n---\n## License\n\n![Public Domain Button](https://licensebuttons.net/p/zero/1.0/88x31.png)\n\nThe o2r Executable Research Compendium specification is licensed under Creative Commons CC0 1.0 Universal License, see file LICENSE. To the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work. This work is published from: Germany.\n",
    "termsOfService": "",
    "contact": {},
    "license": {
      "name": "Creative Commons CC0 1.0 Universal License",
      "url": "https://creativecommons.org/publicdomain/zero/1.0/"
    },
    "version": "1.0",
    "x-logo": {
      "url": "https://o2r.info/api/logo.png"
    }
  },
  "servers": [
    {
      "url": "https://o2r.uni-muenster.de/api/v1",
      "description": "The standard server for the o2r api"
    }
  ],
  "paths": {
    "/compendium": {
      "post": {
        "tags": [
          "Compendium"
        ],
        "summary": "Upload via API",
        "description": "Upload a research workspace or full compendium as a compressed `.zip` archive with an HTTP `POST` request using `multipart/form-data`.\n\nThe upload is only allowed for logged in users. Upon successful extraction of archive and processing of the contents, the `id` for the new compendium is returned.\n\n<!--HTML is necessary, due to being essential for the notes-->\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Required user level and authentication</b></p>\n  <p>The user creating a new compendium must have the required user level. Requests must be authenticated with a cookie <code>connect.sid</code>, see user authentication.</p>\n</div>\n\n\n```\ncurl -F \"compendium=@compendium.zip;type=application/zip\" \\\n    -F content_type=compendium \\\n    --cookie \"connect.sid=<cookie string here>\" \\\n    https://…/api/v1/compendium\n```\n\n```\ncurl -F \"compendium=@path/to/workspace.zip;type=application/zip\" \\\n    -F content_type=workspace \\\n    --cookie \"connect.sid=<cookie string here>\" \\\n  https://…/api/v1/compendium\n```\n<div class=\"note yellow_note\">\n  <p><b>&#x26A0; Important</b></p>\n  <p>After successful upload the candidate process must be completed for workspaces.</p>\n</div>\n\nFor local testing you can quickly upload some of the example compendia and workspaces from the erc-examples project.\n",
        "operationId": "upload_compendium",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "requestBody": {
          "description": "The Compendium to be uploaded.\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/new_compendium"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "upload response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/upload_response"
                },
                "examples": {
                  "upload_success": {
                    "$ref": "#/components/examples/upload_success"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request due to not supported content_type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "bad_request_content_type": {
                    "$ref": "#/components/examples/bad_request_content_type"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized due to user not being logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "unauthorized": {
                    "$ref": "#/components/examples/unauthorized"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden due to user level not allowing upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "unauthorized": {
                    "$ref": "#/components/examples/upload_forbidden"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "List compendium",
        "description": "Returns up to 100 results by default.",
        "operationId": "list_compendium",
        "parameters": [
          {
            "$ref": "#/components/parameters/job_id_query"
          },
          {
            "$ref": "#/components/parameters/user_query"
          },
          {
            "$ref": "#/components/parameters/doi_query"
          },
          {
            "$ref": "#/components/parameters/start_query"
          },
          {
            "$ref": "#/components/parameters/limit_query"
          }
        ],
        "responses": {
          "200": {
            "description": "A json Array with the matching results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_response"
                },
                "examples": {
                  "list_success": {
                    "$ref": "#/components/examples/list_success"
                  },
                  "list_fail": {
                    "$ref": "#/components/examples/list_fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/compendium/{compendium_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/compendium_id"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "View a single compendium and metadata",
        "description": "This includes the complete metadata set, related job ids and a tree representation of the included files. The created timestamp refers to the upload of the compendium. It is formated as ISO8601.\n\n`curl https://…/api/v1/$ID`\n",
        "operationId": "view_compendium",
        "responses": {
          "200": {
            "description": "Returns the matching Compendium.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/view_response"
                },
                "examples": {
                  "view_success": {
                    "$ref": "#/components/examples/view_success"
                  },
                  "view_metadata": {
                    "$ref": "#/components/examples/view_metadata"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No compendium with the given id found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "view_success": {
                    "$ref": "#/components/examples/view_not_found"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Compendium"
        ],
        "summary": "Delete compendium",
        "description": "To delete a compendium **candidate**, an HTTP <code>DELETE</code> request can be send to the compendium endpoint.\n\n<div class=\"note green_note\">\n  <p><b>&#x26A0; Important</b></p>\n  <p>Once a compendium is not a candidate anymore, it can only be deleted by admins with the required user level. The compendium contents should be moved to a specific location to the server as a backup.</p>\n</div>\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Required user level for candidate deletion</b></p>\n  <p>The user deleting a candidate must be the author or have the required user level.</p>\n</div>\n\n## Request\n\nThe following request deletes the compendium with the identifier 12345, including metadata and files.\n\n```\ncurl -X DELETE https://…/api/v1/compendium/12345 \\\n--cookie \"connect.sid=<code string here>\"\n\n```\n",
        "operationId": "delete_compendium",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "responses": {
          "204": {
            "description": "The response has an HTTP status of `204` and an empty body for successful deletion.\n"
          },
          "401": {
            "description": "Unauthorized due to user not being logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "delete_unauthorized": {
                    "$ref": "#/components/examples/unauthorized"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden due to userlevel not being high enough.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "delete_unauthorized": {
                    "$ref": "#/components/examples/delete_forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No compendium with the given id found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "view_success": {
                    "$ref": "#/components/examples/delete_not_found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/compendium/{compendium_id}.{file_extension}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/compendium_id"
        },
        {
          "$ref": "#/components/parameters/file_extension"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "Download compendium",
        "description": "Download compendium files as an archive.\n\n<div class=\"note yellow_note\">\n  <p><b>&#x26A0; Warning</b></p>\n  <p>This download feature does not provide access to complete and valid compendia, because it does not comprise an update of the packaging, while it does include brokered metadata files. To download a valid compendium, create a shipment with the appropriate recipient.</p>\n</div>\nSupported formats are as follows:\n\n- `zip`\n- `tar`\n- `tar.gz`\n\n## Request\n`GET /api/v1/compendium/$ID.zip`\n\n```\nGET /api/v1/compendium/:id.zip\nGET /api/v1/compendium/:id.tar\nGET /api/v1/compendium/:id.tar.gz\nGET /api/v1/compendium/:id.tar?gzip\nGET /api/v1/compendium/:id.zip?image=false\n```\n",
        "operationId": "download_compendium",
        "parameters": [
          {
            "$ref": "#/components/parameters/gzip_query"
          },
          {
            "$ref": "#/components/parameters/image_query"
          }
        ],
        "responses": {
          "200": {
            "description": "The response is a file attachment. The suggested file name is available in the HTTP header content-disposition using the respective file extension for a file named with the compendium identifier (e.g. `wdpV9.zip`, `Uh1o0.tar`, or `LBIt1.tar.gz`).\n",
            "content": {
              "application/zip": {
                "examples": {
                  "download_success": {
                    "$ref": "#/components/examples/download_success"
                  }
                }
              },
              "application/x-tar": {
                "examples": {
                  "download_success": {
                    "$ref": "#/components/examples/download_success"
                  }
                }
              },
              "application/octet-stream": {
                "examples": {
                  "download_success": {
                    "$ref": "#/components/examples/download_success"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "view_success": {
                    "$ref": "#/components/examples/download_bad_request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No compendium with the given id found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "view_success": {
                    "$ref": "#/components/examples/view_not_found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/compendium/{compendium_id}/jobs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/compendium_id"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "List related execution jobs",
        "description": "`curl https://…/api/v1/compendium/$ID/jobs`\n\n`GET /api/v1/compendium/:id/jobs`\n",
        "operationId": "compendium_list_job",
        "responses": {
          "200": {
            "description": "Returns a JSON object with the jobs related to the compendium",
            "content": {
              "application/json": {
                "examples": {
                  "job_list_simple": {
                    "$ref": "#/components/examples/compendium_list_job_success"
                  },
                  "job_list_fail": {
                    "$ref": "#/components/examples/job_list_fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/compendium/{compendium_id}/metadata": {
      "parameters": [
        {
          "$ref": "#/components/parameters/compendium_id"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "Get the metadata acompendium",
        "description": "The following endpoint allows to access only the normative o2r-metadata element:\n\n`curl https://…/api/v1/$ID/metadata`\n\n`GET /api/v1/compendium/:id/metadata`\n",
        "operationId": "get_metadata",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "responses": {
          "200": {
            "description": "The o2r-metadata object of the specified compendium",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata_response"
                },
                "examples": {
                  "metadata_success": {
                    "$ref": "#/components/examples/metadata_success"
                  },
                  "metadata_spatial": {
                    "$ref": "#/components/examples/metadata_spatial"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No compendium with the given id found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "view_success": {
                    "$ref": "#/components/examples/view_not_found"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Compendium"
        ],
        "summary": "Update the metadata acompendium",
        "description": "The following endpoint can be used to update the `o2r` metadata elements.\nAll other metadata sub-properties are only updated by the service itself, i.e. brokered metadata.\nAfter creation the metadata is persisted to both files and database, so updating the metadata via this endpoint allows to trigger a brokering process and to retrieve different metadata formats either via this metadata API or via downloading the respective file using the download endpoint.\n\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Metadata update rights</b></p>\n  <p> Only authors of a compendium or users with the required user level can update a compendium's metadata.</p>\n</div>\n\n### Metadata update request\n\n```\ncurl -H 'Content-Type: application/json' \\\n  -X PUT \\\n  --cookie \"connect.sid=<code string here>\" \\\n  -d '{ \"o2r\": { \"title\": \"Blue Book\" } }' \\\n  /api/v1/compendium/:id/metadata\n```\nThe request overwrites the existing metadata properties, so the full o2r metadata must be put with a JSON object called `o2r` at the root, even if only specific fields are changed.\n",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull metdata update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata_response"
                },
                "examples": {
                  "metadata_update_success": {
                    "$ref": "#/components/examples/metadata_update_success"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "metadata_bad_request_incomplete_metadata": {
                    "$ref": "#/components/examples/metadata_bad_request_incomplete_metadata"
                  },
                  "metadata_bad_request_syntax_error": {
                    "$ref": "#/components/examples/metadata_bad_request_syntax_error"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "metadata_unauthorized": {
                    "$ref": "#/components/examples/metadata_unauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Enitity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "metadata_unprocessable_entity": {
                    "$ref": "#/components/examples/metadata_unprocessable_entity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/compendium/{compendium_id}/link": {
      "parameters": [
        {
          "$ref": "#/components/parameters/compendium_id"
        }
      ],
      "put": {
        "tags": [
          "Extras"
        ],
        "summary": "Create link",
        "description": "The following request creates a link for the candidate compendium with the identifier 12345.\n```\ncurl -X PUT https://…/api/v1/compendium/12345/link \\\n    --cookie \"connect.sid=<code string here>\"\n```\n",
        "operationId": "upload_link",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "responses": {
          "200": {
            "description": "Link creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/link_response"
                },
                "examples": {
                  "link_success": {
                    "$ref": "#/components/examples/link_success"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Bad Request due to not supported content_type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "unauthorized": {
                    "$ref": "#/components/examples/metadata_unauthorized"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unauthorized due to user not being logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "not_found": {
                    "$ref": "#/components/examples/delete_not_found"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Extras"
        ],
        "summary": "Create link",
        "description": "The following request deletes a link for the candidate compendium with the identifier 12345.\n```\ncurl -X DELETE https://…/api/v1/compendium/12345/link \\\n    --cookie \"connect.sid=<code string here>\"\n```\n",
        "operationId": "delete_link",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "responses": {
          "204": {
            "description": "Link deletion successfull"
          },
          "401": {
            "description": "Bad Request due to not supported content_type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "unauthorized": {
                    "$ref": "#/components/examples/metadata_unauthorized"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden due to user level not allowing upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/delete_forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unauthorized due to user not being logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "not_found": {
                    "$ref": "#/components/examples/delete_not_found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inspection/{compendium_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/compendium_id"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "Compendium file listing",
        "description": "The file listing is returned in the single view of a job or compendium. It includes the complete content of the bagtainer in its current state.\nIf a job has been run and the programme outputs new data, this new data is included as well.\n\nFile listings are represented as a Object. The file structure for a synthetic job `nj141` is as follows.\n\n```text\nnj141\n├── bagit.txt\n└── data\n    ├── paper.Rmd\n    └── Dockerfile\n```\n\nis be represented as\n\n```json\n{\n  \"path\": \"/api/v1/job/nj141/data\",\n  \"name\": \"nj141\",\n  \"children\": [\n    {\n      \"path\": \"/api/v1/job/nj141/data/bagit.txt\",\n      \"name\": \"bagit.xt\",\n      \"type\": \"text/plain\",\n      \"size\": 55\n    },\n    {\n      \"path\": \"/api/v1/job/nj141/data/data\",\n      \"name\": \"data\",\n      \"children\": [\n        {\n          \"path\": \"/api/v1/job/nj141/data/data/paper.Rmd\",\n          \"name\": \"paper.Rmd\",\n          \"type\": \"text/plain\",\n          \"size\": 346512\n        }\n        {\n          \"path\": \"/api/v1/job/nj141/data/data/Dockerfile\",\n          \"name\": \"Dockerfile\",\n          \"type\": \"text/plain\",\n          \"size\": 1729\n        }\n      ]\n    }\n  ]\n}\n```\n\n## `path` property\n\nThe `path` property for each file in the listing is a link to the raw file. Additionally the `GET` parameter `?size=…` can be appended to retrieve previews of the files. In the case of Images (`png`, `jpg`, `gif`, `tiff`), the value defines the maximum width/height. For text files (`txt`, `csv`, scripts), the value defines the amount of lines returned.\n\n### `type` property\n\nThe `type` property is a best guess for the MIME type of the file content. It is a result of the files extension. Look at the list of extension to type mapping below.\n\n## File extension to MIME type mappings\n\nThis list contains the custom mapping of file extensions to MIME types used in the server.\n\n| Extension        | MIME type          |\n|------------------|--------------------|\n| `.R`, `.r`       | `script/x-R`       |\n|  `.RData`, `.Rdata`, `.rdata`, `.rda`   |  `application/x-r-data`  |\n\n## File inspection: RData\n\n`.RData` files are a [binary format](https://stat.ethz.ch/R-manual/R-devel/library/base/html/save.html) for usage with R to save any kind of object (data, functions) using an internal serialisation.\nThe format is [not suitable](https://www.loc.gov/preservation/digital/formats/fdd/fdd000470.shtml) for archival or data exchange, but might be included in a compendium out of negligence by or convenience for the author.\n\nSince the file format is binary and not readable by non-R client applications, the API provides the endpoint `/api/v1/inspection` to retrieve a JSON representation of the objects in an RData file.\n\nValues of objects are provided as JSON arrays following the specifications by the R package [`jsonlite`](https://cran.r-project.org/package=jsonlite).\n",
        "operationId": "get_file",
        "parameters": [
          {
            "$ref": "#/components/parameters/file_query"
          },
          {
            "$ref": "#/components/parameters/objects_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file is represented as a JSON array",
            "content": {
              "application/json": {
                "examples": {
                  "files_simple": {
                    "$ref": "#/components/examples/files_simple"
                  },
                  "files_complex_1": {
                    "$ref": "#/components/examples/files_complex_1"
                  },
                  "files_complex_2": {
                    "$ref": "#/components/examples/files_complex_2"
                  },
                  "files_objects_errors": {
                    "$ref": "#/components/examples/files_objects_errors"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns the file is represented as a JSON array",
            "content": {
              "application/json": {
                "examples": {
                  "files_simple": {
                    "$ref": "#/components/examples/files_bad_request_1"
                  },
                  "files_complex_1": {
                    "$ref": "#/components/examples/files_bad_request_2"
                  },
                  "files_complex_2": {
                    "$ref": "#/components/examples/files_bad_request_3"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Returns the file is represented as a JSON array",
            "content": {
              "application/json": {
                "examples": {
                  "files_simple": {
                    "$ref": "#/components/examples/files_server_error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/job": {
      "post": {
        "tags": [
          "Compendium"
        ],
        "summary": "Create a new job",
        "description": "Create and run a new execution job with an HTTP POST request using multipart/form-data. Requires a compendium_id.\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Required user level and authentication</b></p>\n  <p>The user creating a new compendium must have the required user level. Requests must be authenticated with a cookie `connect.sid`, see user authentication.</p>\n</div>\n\n`curl -F compendium_id=$ID https://…/api/v1/job`\n\n`POST /api/v1/job`\n",
        "operationId": "create_job",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "requestBody": {
          "description": "The Compendium to be uploaded.\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/new_job"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successfull job creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_response"
                },
                "examples": {
                  "job_success": {
                    "$ref": "#/components/examples/job_success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No matching compendium found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "not_found": {
                    "$ref": "#/components/examples/view_not_found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "not_found": {
                    "$ref": "#/components/examples/job_server_error"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "List Jobs",
        "description": "Lists jobs with filtering and pagination, returning up to 100 results by default.\n\nResults are be sorted by descending date of last change. The content of the response can be limited to certain properties of each result by providing a list of fields, i.e. the parameter `fields`.\n\nResults can be filtered:\n\n- by `compendium_id` i.e. `compendium_id=a4Dnm`,\n- by `status` i.e. `status=success` or\n- by `user` i.e. `user=0000-0000-0000-0001`\n\n`curl https://…/api/v1/job?limit=100&start=2&compendium_id=$ID&status=success&fields=status`\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/compendium_id_query"
          },
          {
            "$ref": "#/components/parameters/start_query"
          },
          {
            "$ref": "#/components/parameters/limit_query"
          },
          {
            "$ref": "#/components/parameters/user_query"
          },
          {
            "$ref": "#/components/parameters/fields_query"
          }
        ],
        "operationId": "list_job",
        "responses": {
          "200": {
            "description": "Returns a JSON object with the matching jobs",
            "content": {
              "application/json": {
                "examples": {
                  "job_list_simple": {
                    "$ref": "#/components/examples/job_list_simple"
                  },
                  "job_list_expanded": {
                    "$ref": "#/components/examples/job_list_expanded"
                  },
                  "job_list_fail": {
                    "$ref": "#/components/examples/job_list_fail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/job/{job_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/job_id_path"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "View single job",
        "description": "View details for a single job. The file listing format is described in compendium files.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/steps_query"
          }
        ],
        "operationId": "view_job",
        "responses": {
          "200": {
            "description": "Returns a JSON object with job details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/view_job_response"
                },
                "examples": {
                  "view_job_success": {
                    "$ref": "#/components/examples/view_job_success"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No matching compendium found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "not_found": {
                    "$ref": "#/components/examples/view_not_found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recipient": {
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "Supported recipients",
        "description": "Use the _recipient_ endpoint to find out, which repositories are available and configured.\nThe response is list of tuples with `id` and `label` of each repository.\nThe `id` is the repository identifier to be used in requests to the `/shipment` endpoint, e.g. to define the recipient, while `label` is a human-readable text string suitable for display in user interfaces.\nAn implementation may support one or more of the following repositories:\n\n- `b2share` - [Eudat b2share](https://b2share.eudat.eu/)\n- `b2share_sandbox` - [Eudat b2share Sandbox](https://trng-b2share.eudat.eu/)\n- `zenodo` - [Zenodo Sandbox](https://zenodo.org)\n- `zenodo_sandbox` - [Zenodo Sandbox](https://sandbox.zenodo.org)\n\nThe `download` recipient is a surrogate to enable shipping to the user's local storage.\n",
        "operationId": "list_reciepients",
        "responses": {
          "200": {
            "description": "Retruns A JSON object with all supported recipients.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recipient_response"
                },
                "examples": {
                  "recipient_success": {
                    "$ref": "#/components/examples/recipient_success"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shipment": {
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "List shipments",
        "description": "This is a basic request to list all shipments identifiers.\n`GET /api/v1/shipment`\nYou can also get only the shipment identifiers belonging to a compendium id (e.g. `4XgD97`).\n\n`GET /api/v1/shipment?compendium_id=4XgD97`\n",
        "operationId": "list_shipment",
        "parameters": [
          {
            "$ref": "#/components/parameters/compendium_id_shipment_query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all shuipment ids.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment_response"
                },
                "examples": {
                  "list_success": {
                    "$ref": "#/components/examples/shipment_success"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shipment/{shipment_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/shipment_id"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "Get a single shipment",
        "description": "Example request:\n\n`GET /api/v1/shipment/dc351fc6-314f-4947-a235-734ab5971eff`\n",
        "operationId": "view_shipment",
        "responses": {
          "200": {
            "description": "A json object with the matching results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/view_shipment_response"
                },
                "examples": {
                  "view_shipment_success": {
                    "$ref": "#/components/examples/view_shipment_success"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Compendium"
        ],
        "summary": "Create a new shipment",
        "description": "You can start a initial creation of a shipment, leading to transmission to a repository and creation of a deposition, using a `POST` request.\n\n`POST /api/v1/shipment`\n\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Required user level</b></p>\n  <p>The user sending the request to create a shipment must have the required [user level](user/levels.md).</p>\n</div>\n",
        "operationId": "upload_shipment",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "requestBody": {
          "description": "The shipment to be uploaded.\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/new_shipment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The response contains the shipment document, see Get a single shipment. Some of the fields are not available (have value `null`) until after publishing, e.g. `deposition_url`.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/upload_shipment_response"
                },
                "examples": {
                  "upload_shipment_success": {
                    "$ref": "#/components/examples/upload_shipment_success"
                  }
                }
              }
            }
          },
          "202": {
            "description": "If the recipient is the download surrogate, the response will be `202` and a zip stream with the Content type `application/zip`. The download zip stream is also available under the url of the shipment plus /dl, once it has been created, e.g.:\n\n`http://localhost:8087/api/v1/shipment/22e7b17c-0047-4cb9-9041-bb87f30de388/dl`\n",
            "content": {
              "application/zip": {
                "examples": {
                  "upload_shipment_zip": {
                    "$ref": "#/components/examples/upload_shipment_zip"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shipment/{shipment_id}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/shipment_id"
        }
      ],
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "Shipment status",
        "description": "A shipment can have three possible status:\n\n- `shipped` - a deposition has been created at a repository and completed the necessary metadata for publication.\n\n- `published` - the contents of the shipment are published on the repository, in which case the publishment can not be undone.\n\n- `error` - an error occurred during shipment or publishing.\n\nTo get only a shipment's current status you may use the sub-resource `/status`.\n",
        "operationId": "shipment_status",
        "responses": {
          "200": {
            "description": "Retruns A JSON object with the shipment id and status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment_status_response"
                },
                "examples": {
                  "shipment_status_success": {
                    "$ref": "#/components/examples/shipment_status_success"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shipment/{shipment_id}/publishment": {
      "parameters": [
        {
          "$ref": "#/components/parameters/shipment_id"
        }
      ],
      "put": {
        "tags": [
          "Compendium"
        ],
        "summary": "Publish in a deposition",
        "description": "The publishment is supposed to have completed the status shipped where metadata requirements for publication have been checked.\n\n <div class=\"note blue_note\">\n  <p><b>&#x26A0; Note</b></p>\n  <p>Once published, a deposition can no longer be deleted on the supported repositories.</p>\n</div>\n\n`PUT api/v1/shipment/<shipment_id>/publishment`\n\nNote that a publishment is not possible if the recipient is the download surrogate which immediately results in a zip stream as a response.\n",
        "responses": {
          "200": {
            "description": "Returns a JSON object with the id and status of the shipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment_status_response"
                },
                "examples": {
                  "job_list_simple": {
                    "$ref": "#/components/examples/publish_put_success"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Compendium"
        ],
        "summary": "List deposition files",
        "description": "You can request a list of all files in a deposition and their properties with the sub-resource `/publishment`.\n\n`GET api/v1/shipment/<shipment_id>/publishment`\n\nYou can find the `id` of the file you want to interact with in this json list object at `files[n].id`, where `n` is the position of that file in the array.\nFiles can be identified in this response by either their id in the depot, their filename or their checksum.\n",
        "responses": {
          "200": {
            "description": "Returns a JSON object with all the deposition files of this shipment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment_files_response"
                },
                "examples": {
                  "shipment_files_success": {
                    "$ref": "#/components/examples/shipment_files_success"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shipment/{shipment_id}/files/{file_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/shipment_id"
        },
        {
          "$ref": "#/components/parameters/file_id"
        }
      ],
      "delete": {
        "tags": [
          "Compendium"
        ],
        "summary": "Delete a specific file from a deposition",
        "description": "You can delete files from a `shipped` shipment's deposition. You must state a file's identifier, which can be retrieved from the shipment's deposition files property `id`, as the `file_id` path parameter. Files for a `published` shipment usually cannot be deleted.\n\n`DELETE api/v1/shipment/<shipment_id>/files/<file_id>`\n",
        "responses": {
          "204": {
            "description": "Deletion successfull"
          }
        }
      }
    },
    "/substitution": {
      "post": {
        "tags": [
          "Extras"
        ],
        "summary": "Create substitution",
        "description": "`Create substitution` produces a new compendium with its own files in the storage and metadata in the database.\nA substitution can be created with an HTTP `POST` request using `multipart/form-data` and content-type `JSON`.\nRequired content of the request are the identifiers of the base and overlay compendia and at least one pair of _substitution files_, consisting of a base file and an overlay file.\n\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Note</b></p>\n  <p>  A substitution process removes potentially existing packaging information, i.e. if the base compendium was a BagIt bag, the substitution will only contain the payload directory contents (<code>/data</code> directory).\n  \n  \n  The overlay file is stripped of all paths and is copied directly into the substitution's root directory.</p>\n</div>\n\n`POST /api/v1/substitution`\n\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Required user level</b></p>\n  <p>The user creating a new substitution must have the required user level.</p>\n</div>\n\nYou can view the newly suvbstituted Compendium with the standard get Request for compendium view `GET /api/v1/compendium/:id`. The response will include extra metadata on the substitution.\n",
        "operationId": "upload_substitution",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "requestBody": {
          "description": "The Compendium to be uploaded.\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/new_substitution"
              },
              "examples": {
                "substitution_request_body": {
                  "$ref": "#/components/examples/substitution_request_body"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/upload_response"
                },
                "examples": {
                  "upload_success": {
                    "$ref": "#/components/examples/substitution_creation_success"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized due to user level not being sufficient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "substitution_unauthorized_1": {
                    "$ref": "#/components/examples/substitution_unauthorized_1"
                  },
                  "substitution_unauthorized_2": {
                    "$ref": "#/components/examples/substitution_unauthorized_2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "substitution_not_found_1": {
                    "$ref": "#/components/examples/substitution_not_found_1"
                  },
                  "substitution_not_found_2": {
                    "$ref": "#/components/examples/substitution_not_found_2"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Extras"
        ],
        "summary": "List substituted Compenium",
        "description": "`curl https://.../api/v1/substitution`\n\n`GET /api/v1/substitution`\n",
        "operationId": "view_substitution",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/overlay_query"
          },
          {
            "$ref": "#/components/parameters/base_query"
          }
        ],
        "responses": {
          "200": {
            "description": "The successfull Listing of all the substitutions as JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_response"
                },
                "examples": {
                  "substitution_list_success": {
                    "$ref": "#/components/examples/substitution_list_success"
                  },
                  "substitution_list_fail": {
                    "$ref": "#/components/examples/substitution_list_fail"
                  },
                  "substituion_list_base": {
                    "$ref": "#/components/examples/substitution_list_base"
                  },
                  "substitution_list_overlay": {
                    "$ref": "#/components/examples/substitution_list_overlay"
                  },
                  "substitution_list_base_overlay": {
                    "$ref": "#/components/examples/substitution_list_base_overlay"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "substitution_undefined_1": {
                    "$ref": "#/components/examples/substitution_undefined_1"
                  },
                  "substitution_undefined_2": {
                    "$ref": "#/components/examples/substitution_undefined_2"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The successfull Listing of all the substitutions as JSON object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "substitution_unauthorized_1": {
                    "$ref": "#/components/examples/substitution_unauthorized_1"
                  },
                  "substitution_unauthorized_2": {
                    "$ref": "#/components/examples/substitution_unauthorized_2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "substitution_not_found_1": {
                    "$ref": "#/components/examples/substitution_not_found_1"
                  },
                  "substitution_not_found_2": {
                    "$ref": "#/components/examples/substitution_not_found_2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/link": {
      "get": {
        "tags": [
          "Extras"
        ],
        "summary": "List links",
        "description": "```\ncurl -X GET http://localhost/api/v1/link\n     --cookie \"connect.sid=s%3AVU61x4E<rest of cookie>\"\n```\n",
        "operationId": "list_link",
        "security": [
          {
            "cookie_authenification": []
          }
        ],
        "responses": {
          "200": {
            "description": "Link creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/link_list_response"
                },
                "examples": {
                  "link_list_success": {
                    "$ref": "#/components/examples/link_list_success"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Bad Request due to not supported content_type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_error_model"
                },
                "examples": {
                  "unauthorized": {
                    "$ref": "#/components/examples/metadata_unauthorized"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {},
    "/user/{user_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/user_id"
        }
      ]
    },
    "/auth/login": {},
    "/auth/whoami": {}
  },
  "components": {
    "schemas": {
      "new_compendium": {
        "type": "object",
        "properties": {
          "content_type": {
            "description": "The Type of archive that is to be uploaded. Can be `compendium` or `workspace`.\n- `compendium` - compendium,\nwhich is expected to be complete and valid, for *examination* of a compendium\n\n- `workspace` - formless workspace, for *creation* of a compendium\n\n<div class=\"note yellow_note\">\n  <p><b>&#x26A0; Warning</b></p>\n  <p>If a complete ERC is submitted as a workspace, it may result in an error, or the contained metadata and other files may be overwritten by the creation process.</p>\n</div>\n",
            "type": "string",
            "enum": [
              "compendium",
              "workspace"
            ]
          },
          "compendium": {
            "description": "The archive file as a compressed .zip",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "new_job": {
        "type": "object",
        "properties": {
          "compendium_id": {
            "description": "The identifier of the compendium to base this job on.\n",
            "type": "string"
          }
        },
        "required": [
          "compendium_id"
        ]
      },
      "new_shipment": {
        "type": "object",
        "properties": {
          "compendium_id": {
            "type": "string",
            "description": "The id of the compendium"
          },
          "recipient": {
            "type": "string",
            "description": "The id of the compendium"
          },
          "update_packaging": {
            "type": "boolean",
            "default": false,
            "description": "The shipment creation only succeeds if a valid package is already present under the provided compendium identifier, or if no packaging is present at all and a new package can be created. In case a partial or invalid package is given, this parameter can control the shipment creation process: If it is set to `true`, the shipment package is updated during the shipment creation in order to make it valid, if set to `false` the shipment creation results in an error.\n"
          },
          "cookie": {
            "type": "string",
            "description": "An authentication cookie must be set in the request header, but it may also be provided via a `cookie` form parameter as a fallback\n"
          },
          "shipment_id": {
            "type": "string",
            "description": "A user-defined identifier for the shipment (see id in response)\n"
          }
        },
        "required": [
          "compendium_id",
          "recipient"
        ]
      },
      "new_substitution": {
        "type": "object",
        "properties": {
          "base": {
            "type": "string",
            "description": "id of the base compendium"
          },
          "overlay": {
            "type": "string",
            "description": "id of the overlay compendium"
          },
          "substitutionFiles": {
            "type": "array",
            "description": "Array of file substitutions specified by `base` and `overlay`",
            "items": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "string",
                  "description": "name of the file from base compendium"
                },
                "overlay": {
                  "type": "string",
                  "description": "name of the overlay compendium that is exchanged for the original file"
                }
              }
            }
          },
          "metadataHandling": {
            "type": "string",
            "enum": [
              "keepBase",
              "extractAndMerge",
              "extract"
            ],
            "description": "property to specify, if the metadata of the base ERC will be adopted (`keepBase` = **keep metadata** of base ERC) or there will be a new extraction of metadata, that will be merged into the metadata of the base ERC (`extractAndMerge` = **extract and merge metadata** for new ERC) or that will not be merged (`extract` = **extract metadata** of new ERC)\n"
          }
        }
      },
      "upload_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "list_response": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view_response": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/user_id"
          },
          "metadata": {
            "type": "object"
          },
          "created": {
            "type": "string",
            "format": "date-string"
          },
          "user": {
            "type": "string"
          },
          "bag": {
            "type": "boolean"
          },
          "compendium": {
            "type": "boolean"
          },
          "substituted": {
            "type": "boolean"
          },
          "files": {
            "type": "object"
          }
        }
      },
      "metadata_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "o2r": {
                "type": "object"
              }
            }
          }
        }
      },
      "job_response": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string"
          }
        }
      },
      "view_job_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "compendium_id": {
            "type": "string"
          },
          "steps:": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "failure",
              "running"
            ]
          },
          "files": {
            "type": "object"
          }
        }
      },
      "recipient_response": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "shipment_response": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "view_shipment_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "compendium_id": {
            "type": "string"
          },
          "deposition_id": {
            "type": "string"
          },
          "deposition_url": {
            "type": "string"
          },
          "update_packaging": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "shipped",
              "published",
              "error"
            ]
          },
          "md": {
            "type": "object"
          }
        }
      },
      "upload_shipment_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deposition_id": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "shipped",
              "published",
              "error"
            ]
          }
        }
      },
      "shipment_status_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "shipped",
              "published",
              "error"
            ]
          }
        }
      },
      "shipment_files_response": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "link_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "compendium_id": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "format": "user_id"
          }
        }
      },
      "link_list_response": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "compendium_id": {
                  "type": "string"
                },
                "user": {
                  "type": "string",
                  "format": "user_id"
                }
              }
            }
          }
        }
      },
      "general_error_model": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "user_id": {
        "type": "string",
        "pattern": "^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$"
      }
    },
    "parameters": {
      "job_id_query": {
        "name": "job_id",
        "in": "query",
        "description": "Comma-separated list of related job ids to filter by.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "user_query": {
        "name": "user",
        "in": "query",
        "description": "Public user identifier to filter by.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "doi_query": {
        "name": "doi",
        "in": "query",
        "description": "A DOI to filter by.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "start_query": {
        "name": "start",
        "in": "query",
        "description": "Starting point of the result list. <code>start - 1</code> results are skipped. Defaults to <code>1</code>.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "limit_query": {
        "name": "limit",
        "in": "query",
        "description": "Limits the number of results in the response. Defaults to <code>100</code>.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100
        }
      },
      "compendium_id_query": {
        "name": "compendium_id",
        "in": "query",
        "description": "Comma-separated list of related compendium ids to filter by.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "fields_query": {
        "name": "fields",
        "in": "query",
        "description": "Specify which additional attributes results list should contain. Can contain following fields: `status`, `user`. Defaults to none.\n",
        "required": false,
        "schema": {
          "enum": [
            "status",
            "user",
            "status, user"
          ]
        }
      },
      "steps_query": {
        "name": "steps",
        "in": "query",
        "description": "The properties `status`, `start` and `end` of _all steps_ are always included in the response.\n\nSupported values for `steps` are `all` or a comma separated list of one or more step names, e.g. `generate_configuration,check`.\nThe response will contain the default properties for all steps but other properties only for the selected ones.\nAny other values for `steps` or not providing the parameter at all will return the default (e.g. `steps=no`).\n",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "compendium_id_shipment_query": {
        "name": "compendium_id",
        "in": "query",
        "description": "The identifier of a specific compendium",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "gzip_query": {
        "name": "gzip",
        "in": "query",
        "description": "*only for .tar endpoint* - compress tarball with gzip\n",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "image_query": {
        "name": "image",
        "in": "query",
        "description": "`?image=true` or `?image=false` - include tarball of Docker image in the archive , default is true\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "file_query": {
        "name": "file",
        "in": "query",
        "description": "the name of the file to inspect, or a relative path to a file within the compendium\n",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "objects_query": {
        "name": "objects",
        "in": "query",
        "description": "the name of objects in the file\n",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "overlay_query": {
        "name": "overlay",
        "in": "query",
        "description": "id of the overlay compendium that the results should be related to",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "base_query": {
        "name": "base",
        "in": "query",
        "description": "id of the base compendium that the results should be related to",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "compendium_id": {
        "name": "compendium_id",
        "in": "path",
        "description": "Id of the compendium",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "file_extension": {
        "name": "file_extension",
        "in": "path",
        "description": "File Extension for Compendium Download",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "zip",
            "tar",
            "tar.gz"
          ]
        }
      },
      "job_id_path": {
        "name": "job_id",
        "in": "path",
        "description": "Id of the job",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "shipment_id": {
        "name": "shipment_id",
        "in": "path",
        "description": "Id of the shipment",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "file_id": {
        "name": "file_id",
        "in": "path",
        "description": "Id of the File",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "user_id": {
        "name": "user_id",
        "in": "path",
        "description": "Id of the user",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "examples": {
      "upload_success": {
        "summary": "A upload success example",
        "value": {
          "id": "a4Nd1"
        }
      },
      "upload_forbidden": {
        "summary": "A forbidden example",
        "value": {
          "error": "user level does not allow compendium creation"
        }
      },
      "list_success": {
        "summary": "Successful Listing",
        "description": "Returns all the matching compendia as an array",
        "value": {
          "results": [
            "nkm4b",
            "nb2sm",
            "..."
          ]
        }
      },
      "list_fail": {
        "summary": "No matching compendium found",
        "description": "If there is no compendium found, the service returns an empty list.\\\n`GET /api/v1/compendium?doi=not_a_doi`\n",
        "value": {
          "results": []
        }
      },
      "view_success": {
        "summary": "A view success example",
        "description": "Returns a object with informations about the matching compendium.",
        "value": {
          "id": "comid",
          "metadata": "...",
          "created": "2016-08-01T13:57:40.760Z",
          "user": "0000-0001-0273-7906",
          "files": "...",
          "bag": true,
          "compendium": true,
          "supstituted": true
        }
      },
      "view_not_found": {
        "summary": "A not found example",
        "description": "Returns an error",
        "value": {
          "error": "no compendium with this id"
        }
      },
      "delete_forbidden": {
        "summary": "A deletion forbidden example",
        "description": "Returns an error",
        "value": {
          "error": "user level not sufficient to delete compendium"
        }
      },
      "delete_not_found": {
        "summary": "A deletion not found example",
        "description": "Returns an error",
        "value": {
          "error": "compendium not found"
        }
      },
      "view_metadata": {
        "summary": "An expanded example with metadata",
        "description": "The metadata for an example compendium",
        "value": {
          "id": "12345",
          "metadata": {
            "raw": {
              "title": "Programming with Data. Springer, New York, 1998. ISBN 978-0-387-98503-9.",
              "author": "John M. Chambers",
              "more content": "..."
            },
            "o2r": {
              "title": "Programming with Data",
              "creators": [
                {
                  "name": "John M. Chambers"
                }
              ],
              "publication_date": 1998,
              "more content": "..."
            },
            "zenodo": {}
          },
          "created": "…",
          "files": "…"
        }
      },
      "metadata_success": {
        "summary": "A success metadata example",
        "description": "Returns a json object with the metadata\n",
        "value": {
          "id": "compendium_id",
          "metadata": {
            "o2r": {
              "...": "..."
            }
          }
        }
      },
      "metadata_spatial": {
        "summary": "Spatial property of the metadata object",
        "description": "For discovery purposes, the metadata includes extracted GeoJSON bounding boxes based on data files in a workspace.\n\nCurrently supported spatial data sources:\n\n- shapefiles\n\nThe following structure is made available per file.\n\nThe `spatial` key has a `union` bounding box, that wraps all extracted bounding boxes.\n",
        "value": "{\n  \"id\":\"compendium_id\",\n  \"metadata\": {\n    \"o2r\": {\n      \"spatial\": {\n          \"files\": [\n              {\n                  \"geojson\": {\n                      \"bbox\": [\n                          -2.362060546875,\n                          52.0862573323384,\n                          -1.285400390625,\n                          52.649729197309426\n                      ],\n                      \"geometry\": {\n                          \"coordinates\": [\n                              [\n                                  [\n                                      -2.362060546875,\n                                      52.0862573323384\n                                  ],\n                                  [\n                                      -1.285400390625,\n                                      52.649729197309426\n                                  ]\n                              ]\n                          ],\n                          \"type\": \"Polygon\"\n                      },\n                      \"type\": \"Feature\"\n                  },\n                  \"source_file\": \"path/to/file1.geojson\"\n              },\n              {\n                  \"geojson\": {\n                      \"bbox\": [\n                          7.595369517803192,\n                          51.96245837645124,\n                          7.62162297964096,\n                          51.96966694957956\n                      ],\n                      \"geometry\": {\n                          \"coordinates\": [\n                              [\n                                  [\n                                      7.595369517803192,\n                                      51.96245837645124\n                                  ],\n                                  [\n                                      7.62162297964096,\n                                      51.96966694957956\n                                  ]\n                              ]\n                          ],\n                          \"type\": \"Polygon\"\n                      },\n                      \"type\": \"Feature\"\n                  },\n                  \"source_file\": \"path/to/file2.shp\"\n              }\n          ],\n          \"union\": {\n              \"geojson\": {\n                  \"bbox\": [\n                      -2.362060546875,\n                      51.96245837645124,\n                      7.62162297964096,\n                      51.96245837645124\n                  ],\n                  \"geometry\": {\n                      \"coordinates\": [\n                          [\n                              -2.362060546875,\n                              51.96245837645124\n                          ],\n                          [\n                              7.62162297964096,\n                              51.96245837645124\n                          ],\n                          [\n                              7.62162297964096,\n                              52.649729197309426\n                          ],\n                          [\n                              -2.362060546875,\n                              52.649729197309426\n                          ]\n                      ],\n                      \"type\": \"Polygon\"\n                  },\n                  \"type\": \"Feature\"\n              }\n          }\n      }\n      \"...\":\"...\"\n    }\n  }\n}\n"
      },
      "metadata_update_success": {
        "summary": "A success metadata update example",
        "description": "Returns a json object with the updated excerpt.",
        "value": "{\n  \"id\":\"compendium_id\",\n  \"metadata\": {\n    \"o2r\": {\n      \"title\": \"Blue Book\"\n    }\n  }\n}\n"
      },
      "metadata_unauthorized": {
        "summary": "Unauthorized",
        "description": "Returns an error, due to not being authorized",
        "value": {
          "error": "not authorized"
        }
      },
      "metadata_bad_request_incomplete_metadata": {
        "summary": "Bad Request due to Incomplete metadata",
        "description": "Returns an error due to missing metadata in the request (e.g. description property missing)",
        "value": "{\n    \"error\":\"Error updating metadata file, see log for details\",\n    \"log\": \"[o2rmeta] 20180302.085940 received arguments: {'debug': True, 'tool': 'validate', 'schema': 'schema/json/o2r-meta-schema.json', 'candidate': '/tmp/o2r/compendium/1cAIr/data/.erc/metadata_o2r_1.json'}\n    [o2rmeta] 20180302.085940 launching validator\n    [o2rmeta] 20180302.085940 checking metadata_o2r_1.json against o2r-meta-schema.json\n    [o2rmeta] 20180302.085940 !invalid: None is not of type 'string'\n\n    Failed validating 'type' in schema['properties']['description']:\n        {'type': 'string'}\n\n        On instance['description']:\n            None\"\n}\n"
      },
      "metadata_bad_request_syntax_error": {
        "summary": "Syntax error",
        "value": "\"SyntaxEroor [...]\"\n"
      },
      "metadata_unprocessable_entity": {
        "summary": "Unporcessable Entity in metadata update",
        "description": "The JSON doesnt meet the requirements.\n",
        "value": {
          "error": "JSON with root element 'o2r' required"
        }
      },
      "download_success": {
        "summary": "A successfull zip-file Download example",
        "description": "A successfull download of a compendium as a `.zip` file. \n\nThe zip file contains a comment with the original URL.\n```\n$ unzip -z CXE1c.zip\nArchive:  CXE1c.zip\nCreated by o2r [https://…/api/v1/compendium/CXE1c.zip]\n```\n",
        "value": "Content-Type: application/zip\nTransfer-Encoding: chunked\nContent-Disposition: attachment; filename=\"$ID.zip\"\nX-Response-Time: 13.556ms\n"
      },
      "download_bad_request": {
        "summary": "A bad request for download example",
        "description": "Returns an error",
        "value": {
          "error": "no job found for this compendium, run a job before downloading with image"
        }
      },
      "files_simple": {
        "summary": "Simple data type example",
        "description": "Returns a JSON array representation of the data types.\n\n`GET /api/v1/inspection/<compendium id>?file=simple.Rdata`\n",
        "value": "{  \n  \"aChar\":[  \n    \"a\"\n  ],\n  \"aDouble\":[  \n    2.3\n  ],\n  \"anInteger\":[  \n    1\n  ],\n  \"aString\":[  \n    \"The force is great in o2r.\"\n  ]\n}\n"
      },
      "files_complex_1": {
        "summary": "Complex data type example",
        "description": "Lists are be nested objects, and vectors are JSON arrays (see jsonlite docs for details, defaults are used):\n\n`GET /api/v1/inspection/<compendium id>?file=complex.Rdata`\n",
        "value": "{  \n  \"characterVector\":[  \n    \"one\",\n    \"two\",\n    \"3\"\n  ],\n  \"logicalVector\":[  \n    true,\n    true,\n    false\n  ],\n  \"numericVector\":[  \n    1,\n    2,\n    -7,\n    0.8\n  ],\n  \"orderedList\":{  \n    \"name\":[  \n      \"Fred\"\n    ],\n    \"mynumbers\":[  \n      1,\n      2\n    ],\n    \"age\":[  \n      5.3\n    ]\n  }\n}\n"
      },
      "files_complex_2": {
        "summary": "Complex data type example",
        "description": "Data frames and matrices are mapped to JSON arrays of complex objects (see jsonlite docs for details, defaults are used):\n\n`GET /api/v1/inspection/<compendium id>?file=matrices.Rdata`\n",
        "value": "{  \n  \"dataFrame\":[  \n    {  \n      \"ID\":1,\n      \"Passed\":true,\n      \"Colour\":\"red\"\n    },\n    {  \n      \"ID\":2,\n      \"Passed\":true,\n      \"Colour\":\"white\"\n    },\n    {  \n      \"ID\":3,\n      \"Passed\":true,\n      \"Colour\":\"red\"\n    },\n    {  \n      \"ID\":4,\n      \"Passed\":false\n    }\n  ],\n  \"namedMatrix\":[  \n    [  \n      1,\n      26\n    ],\n    [  \n      24,\n      68\n    ]\n  ]\n}\n"
      },
      "files_objects_errors": {
        "summary": "Example with objects error",
        "description": "If selected objects are not loadable from the file, an errors property in the response is given for each problematic object:\n\n`GET /api/v1/inspection/<compendium id>?file=simple.RData&objects=bar,anInteger,foo`\n",
        "value": "{  \n  \"anInteger\":[  \n    1\n  ],\n  \"errors\":[  \n    \"Error: Object 'bar' does not exist in the file simple.RData\",\n    \"Error: Object 'foo' does not exist in the file simple.RData\"\n  ]\n}\n"
      },
      "files_bad_request_1": {
        "summary": "Parameter missing",
        "value": {
          "error": "Query parameter 'file' missing"
        }
      },
      "files_bad_request_2": {
        "summary": "File does not exists",
        "value": {
          "error": "file 'not_available.Rdata' does not exist in compendium kOSMO"
        }
      },
      "files_bad_request_3": {
        "summary": "Compendium does not exists",
        "value": {
          "error": "compendium '12345' does not exist"
        }
      },
      "files_server_error": {
        "summary": "Internal Server Error",
        "value": {
          "error": "Error loading objects"
        }
      },
      "job_success": {
        "summary": "A successfull job creation",
        "description": "Returns the id of the new job",
        "value": {
          "job_id": "ngK4m"
        }
      },
      "job_server_error": {
        "summary": "A internal server error during job creation",
        "description": "Returns an error",
        "value": {
          "error": "could not create job"
        }
      },
      "job_list_simple": {
        "summary": "A job listing with only the job ids",
        "description": "`GET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&status=success`\n",
        "value": "{\n  \"results\": [\n    \"nkm4L\",\n    \"asdi5\",\n    \"nb2sg\",\n    …\n  ]\n}\n"
      },
      "job_list_expanded": {
        "summary": "A job listing with job id and status",
        "description": "The overall job state can be added to the job list response:\n\n`GET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&status=success&fields=status`\n",
        "value": "{\n  \"results\": [\n    {\n      \"id\":\"nkm4L\",\n      \"status\":\"failure\"\n    },\n    {\n      \"id\":\"asdi5\",\n      \"status\":\"success\"\n    },\n    {\n      \"id\":\"nb2sg\",\n      \"status\":\"running\"\n    },\n    …\n  ]\n}\n"
      },
      "job_list_fail": {
        "summary": "Job listing with no matching jobs",
        "description": "If there are no jobs, the returned list is empty.\n",
        "value": "{\n  \"results\": [ ]\n}\n"
      },
      "view_job_success": {
        "summary": "A successfull job view example",
        "value": "{\n  \"id\":\"UMmJ7\",\n  \"compendium_id\":\"BSgxj\",\n  \"steps\":{\n    \"validate_bag\":{\n      \"status\":\"skipped\",\n      \"text\":[\n        \"Not a bag\"\n      ],\n      \"end\":\"2017-11-17T13:22:48.105Z\",\n      \"start\":\"2017-11-17T13:22:48.105Z\"\n    },\n    \"generate_configuration\":{\n      \"status\":\"success\",\n      \"text\":[\n        \"configuration file not found, generating it...\",\n        \"Saved configuration file to job and compendium\"\n      ],\n      \"end\":\"2017-11-17T13:22:48.119Z\",\n      \"start\":\"2017-11-17T13:22:48.113Z\"\n    },\n    \"validate_compendium\":{\n      \"status\":\"success\",\n      \"text\":[\n        \"all checks passed\"\n      ],\n      \"end\":\"2017-11-17T13:22:48.127Z\",\n      \"start\":\"2017-11-17T13:22:48.125Z\"\n    },\n    \"generate_manifest\":{\n      \"status\":\"success\",\n      \"text\":[\n        /* abbreviated */\n        \"INFO [2017-11-17 13:22:56] Going online? TRUE  ... to retrieve system dependencies (sysreq-api)\",\n        \"INFO [2017-11-17 13:22:56] Trying to determine system requirements for the package(s) 'knitr, backports, magrittr, rprojroot, htmltools, yaml, Rcpp, stringi, rmarkdown, stringr, digest, evaluate' from sysreq online DB\",\n        \"INFO [2017-11-17 13:22:58] Adding CRAN packages: backports, digest, evaluate, htmltools, knitr, magrittr, Rcpp, rmarkdown, rprojroot, stringi, stringr, yaml\",\n        \"INFO [2017-11-17 13:22:58] Created Dockerfile-Object based on /erc/main.Rmd\",\n        \"INFO [2017-11-17 13:22:58] Writing dockerfile to /erc/Dockerfile\",\n        /* abbreviated */\n        \"generated manifest\"\n      ],\n      \"manifest\":\"Dockerfile\",\n      \"end\":\"2017-11-17T13:22:58.865Z\",\n      \"start\":\"2017-11-17T13:22:48.129Z\"\n    },\n    \"image_prepare\":{\n      \"status\":\"success\",\n      \"text\":[\n        \"payload with 756224 total bytes created\"\n      ],\n      \"end\":\"2017-11-17T13:22:58.906Z\",\n      \"start\":\"2017-11-17T13:22:58.875Z\"\n    },\n    \"image_build\":{\n      \"status\":\"success\",\n      \"text\":[\n        \"Step 1/6 : FROM rocker/r-ver:3.4.2\",\n        \"---> 3cf05960bf30\",\n        /* abbreviated */\n        \"---> Running in eb7ccd432592\",\n        \"---> 84db129215f6\",\n        \"Removing intermediate container eb7ccd432592\",\n        \"Successfully built 84db129215f6\",\n        \"Successfully tagged erc:UMmJ7\"\n      ],\n      \"end\":\"2017-11-17T13:22:59.899Z\",\n      \"start\":\"2017-11-17T13:22:58.912Z\"\n    },\n    \"image_execute\":{\n      \"status\":\"success\",\n      \"text\":[\n        \"[started image execution]\",\n        /* abbreviated */\n        \"Output created: display.html\\r\\n> \\r\\n>\",\n        \"[finished image execution]\"\n      ],\n      \"statuscode\":0,\n      \"start\":\"2017-11-17T13:22:59.904Z\"\n    },\n    \"check\":{\n      \"status\":\"failure\",\n      \"text\":[\n        \"Check failed\"\n      ],\n      \"images\":[\n        {\n          \"imageIndex\":0,\n          \"resizeOperationCode\":0,\n          \"compareResults\":{\n            \"differences\":204786,\n            \"dimension\":1290240\n          }\n        }\n      ],\n      \"display\":{\n        \"diff\":\"/api/v1/job/UMmJ7/data/check.html\"\n      },\n      \"errors\":[ ],\n      \"checkSuccessful\":false,\n      \"end\":\"2017-11-17T13:23:04.439Z\",\n      \"start\":\"2017-11-17T13:23:03.479Z\"\n    },\n    \"image_save\": {\n      \"status\": \"success\",\n      \"text\": [\n        \"[Saving image tarball file]\",\n        \"[Saved image tarball to file (size: 875.14 MB)]\"\n      ],\n      \"start\": \"2018-01-29T17:38:55.111Z\",\n      \"file\": \"image.tar\",\n      \"end\": \"2018-01-29T17:39:36.845Z\"\n    },\n    \"cleanup\":{\n      \"status\":\"success\",\n      \"text\":[\n        \"Running regular cleanup\",\n        \"Removed image with tag erc:UMmJ7: [{\\\"Untagged\\\":\\\"erc:UMmJ7\\\"},{\\\"Deleted\\\":\\\"sha256:84db129215f60f805320e0f70c54a706b6e4030f4627c74abfb1e17f287fefa8\\\"},{\\\"Deleted\\\":\\\"sha256:0dc5b951dc58a10e50ea42dd14a1cd59b080199d9ca40cadd0a4fc8ae5e0d139\\\"},{\\\"Deleted\\\":\\\"sha256:ea88669b92a1c67dc2825f9f6d90d334a6032882d3d31bc85671afbd04adaa70\\\"}]\",\n        \"Deleted temporary payload file.\"\n      ],\n      \"end\":\"2017-11-17T13:23:05.592Z\",\n      \"start\":\"2017-11-17T13:23:04.575Z\"\n    }\n  },\n  \"status\":\"failure\",\n  \"files\":{ /* see compendium */  }\n}\n"
      },
      "compendium_list_job_success": {
        "summary": "A job listing with all related execution jobs",
        "value": "{\n  \"results\": [\n    \"nkm4L\",\n    \"asdi5\",\n    \"nb2sg\",\n    …\n  ]\n}\n"
      },
      "recipient_success": {
        "summary": "A successfull reciepent listing",
        "value": "{\n    \"recipients\": [{\n        \"id\": \"download\",\n        \"label\": \"Download\"\n    }, {\n        \"id\": \"b2share_sandbox\",\n        \"label\": \"Eudat b2share Sandbox\"\n    }, {\n        \"id\": \"zenodo_sandbox\",\n        \"label\": \"Zenodo Sandbox\"\n    }]\n}\n"
      },
      "shipment_success": {
        "summary": "A successfull listing of shipments",
        "description": "Returns a JSON array with all shipment ids",
        "value": [
          "dc351fc6-314f-4947-a235-734ab5971eff",
          "..."
        ]
      },
      "view_shipment_success": {
        "summary": "A successfull view of a shipment",
        "description": "Retruns a JSON object with information on the specified shipment.\n<div class=\"note blue_note\">\n  <p><b>&#x26A0; Note</b></p>\n  <p>Returned deposition URLs (property `deposition_url`) from Zenodo as well as Eudat b2share (records) will only be functional after publishing.</p>\n</div>\n",
        "value": "{\n  \"last_modified\": \"2016-12-12 10:34:32.001475\",\n  \"recipient\": \"zenodo\",\n  \"id\": \"dc351fc6-314f-4947-a235-734ab5971eff\",\n  \"deposition_id\": \"63179\",\n  \"user\": \"0000-0002-1825-0097\",\n  \"status\": \"shipped\",\n  \"compendium_id\": \"4XgD97\",\n  \"deposition_url\": \"https://zenodo.org/record/63179\"\n}\n"
      },
      "upload_shipment_success": {
        "summary": "A successfull creation of a shipment",
        "value": "{\n  \"id\": \"9ff3d75e-23dc-423e-a6c6-6987ac5ffc3e\",\n  \"recipient\": \"zenodo\",\n  \"status\": \"shipped\",\n  \"deposition_id\": \"79102\"\n}\n"
      },
      "upload_shipment_zip": {
        "summary": "Zip stream for download",
        "value": "(zip stream starting point)"
      },
      "shipment_status_success": {
        "summary": "A successfull status view of a shipment",
        "value": "{\n  \"id\": \"9ff3d75e-23dc-423e-a6c6-6987ac5ffc3e\",\n  \"status\": \"shipped\"\n}\n"
      },
      "publish_put_success": {
        "summary": "A successfull pulishment",
        "value": "{\n  \"id\": \"9ff3d75e-23dc-423e-a6c6-6987ac5ffc3e\",\n  \"status\": \"published\"\n}\n"
      },
      "shipment_files_success": {
        "summary": "A successfull listing of the depositon files",
        "value": "{\n  \"files\": [{\n      \"filesize\": 393320,\n      \"id\": \"bae2a60c-bd59-47e1-a443-b34bb7d0a981\",\n      \"filename\": \"4XgD9.zip\",\n      \"checksum\": \"702f4db3e53b22176d1d5ddcda462a27\",\n      \"links\": {\n          \"self\": \"https://sandbox.zenodo.org/api/deposit/depositions/71552/files/bae2a60c-bd59-47e1-a443-b34bb7d0a981\",\n          \"download\": \"https://sandbox.zenodo.org/api/files/31dc8f3d-df00-4d8a-bd99-64ef341372b3/4XgD9.zip\"\n      }\n  }]\n}\n"
      },
      "substitution_request_body": {
        "summary": "Request body for a new substitution.",
        "value": {
          "base": "G92NL",
          "overlay": "9fCTR",
          "substitutionFiles": [
            {
              "base": "climate-timeseries.csv",
              "overlay": "mytimeseries_data.csv"
            }
          ],
          "metadataHandling": "keepBase"
        }
      },
      "substitution_creation_success": {
        "summary": "Successfull Substitution Creation",
        "value": {
          "id": "oMMFn"
        }
      },
      "substitution_unauthorized_1": {
        "summary": "Unauthorized due to not being authenticated",
        "value": {
          "error": "not authenticated"
        }
      },
      "substitution_unauthorized_2": {
        "summary": "Unauthorized due to not being allowed this action",
        "value": {
          "error": "not allowed"
        }
      },
      "substitution_not_found_1": {
        "summary": "Base compendium not found",
        "value": {
          "error": "base compendium not found"
        }
      },
      "substitution_not_found_2": {
        "summary": "Overlay compendium not found",
        "value": {
          "error": "overlay compendium not found"
        }
      },
      "substitution_list_success": {
        "summary": "A successfull basic listing of substitutes",
        "description": "The result is a list of compendia ids which were created by a substitution process.",
        "value": {
          "results": [
            "oMMFn",
            "asdi5",
            "nb2sg",
            "…"
          ]
        }
      },
      "substitution_list_fail": {
        "summary": "No substitutes found",
        "description": "If there are no substitutions yet, the returned list is empty.",
        "value": {
          "results": []
        }
      },
      "substitution_list_base": {
        "summary": "Filter by base",
        "description": "`curl https://.../api/v1/substitution?base=jfL3w`\n\n`GET /api/v1/substitution?base=jfL3w`\n\nResult is a list of substituted compendia based on the given base compendium.\n",
        "value": {
          "results": [
            "wGmFn",
            "…"
          ]
        }
      },
      "substitution_list_overlay": {
        "summary": "Filter by overlay",
        "description": "`curl https://.../api/v1/substitution?overlay=as4Kj`\n\n`GET /api/v1/substitution?overlay=as4Kj`\n\nResult is a list of substituted compendia based on the given overlay compendium.\n",
        "value": {
          "results": [
            "9pQ34",
            "1Tnd3",
            "…"
          ]
        }
      },
      "substitution_list_base_overlay": {
        "summary": "Filter by base and overlay",
        "description": "`curl https://.../api/v1/substitution?base=lO3Td&overlay=as4Kj`\n\n`GET /api/v1/substitution?base=lO3Td&overlay=as4Kj`\n\nResult is a list of substituted compendia based on the given base and overlay compendium.\n",
        "value": {
          "results": [
            "9pQ34",
            "1Tnd3",
            "…"
          ]
        }
      },
      "substitution_undefined_1": {
        "summary": "Base compendium undefined",
        "value": {
          "error": "base compendium undefined"
        }
      },
      "substitution_undefined_2": {
        "summary": "Overlay compendium undefined",
        "value": {
          "error": "Overlay compendium undefined"
        }
      },
      "link_success": {
        "summary": "A successfull link creation",
        "description": "The response has an HTTP status of `200` if the public link was created.\nThe response body provides the public link `id`, which can be used for subsequent requests to:\n\n- view the candidate compendium\n- download candidate compendium files\n- start jobs for the candidate compendium\n\nOnly **1 public link** is created per candidate compendium.\n_Subsequent requests will return the same link._\n",
        "value": {
          "id": "lSaOCqxmNEO8Og42a0ONVRYUVoDWeBLr",
          "compendium_id": "xkjzY",
          "user": "0000-0002-1701-2564"
        }
      },
      "link_list_success": {
        "summary": "Successfull listing of links",
        "value": {
          "results": [
            {
              "id": "b56Cy5EG7oiCBPCZMjXIPXoSyPVxiGVA",
              "compendium_id": "eENFZ",
              "user": "0000-0002-1701-2564"
            },
            {
              "id": "p6s3GGn6EaDoZXM8jOWuNd5E1lHKPVRt",
              "compendium_id": "xkjzY",
              "user": "0000-0002-1701-2564"
            }
          ]
        }
      },
      "bad_request_content_type": {
        "summary": "A bad request due to content_type",
        "value": {
          "error": "provided content_type not implemented"
        }
      },
      "unauthorized": {
        "summary": "A unthorized error example",
        "value": {
          "error": "user is not authenticated"
        }
      }
    },
    "securitySchemes": {
      "cookie_authenification": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      }
    }
  },
  "security": [],
  "tags": [],
  "externalDocs": {
    "description": "Find more info in our documentation.",
    "url": "https://o2r.info/api/"
  }
}