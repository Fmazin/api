openapi: 3.0.3
info:
  title: o2r web api
  description: |
    ## About
    
    <span style="color:blue">The o2r web API acts as the interface between the o2r microservices and the web interface.</span>
    
    The API provides services around the executable research compendium (ERC), or "compendium" for short, which is documented in the ERC spec.
    
    A good starting point for understanding the different parts of the API is the compendium life-cycle.
    
    ---
    ## Citation
    
    To cite this specification please use
    
    >_Nüst, Daniel, 2018. Reproducibility Service for Executable Research Compendia: Technical Specifications and Reference Implementation. Zenodo. doi:10.5281/zenodo.2203844_
    
    For a complete list of publications, posters, presentations, and software projects from th2 o2r project please visit https://o2r.info/results/.
    
    ---
    ## General 
    
    The API is implemented as a RESTful API. The entrypoint for the current version is /api/v1.
    
    Unless specified otherwise, responses are always in JSON format. Body parameters in `POST` requests are expected in `multipart/form-data format.` Requests to the API should always be made with a secure connection using  `HTTPS`. Some requests require authentication with a specific user level.
    
    ---
    ## License
    
    ![Public Domain Button](https://licensebuttons.net/p/zero/1.0/88x31.png)
    
    The o2r Executable Research Compendium specification is licensed under Creative Commons CC0 1.0 Universal License, see file LICENSE. To the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work. This work is published from: Germany.
    
  termsOfService: ''
  contact: {}
  license:
    name: Creative Commons CC0 1.0 Universal License
    url: 'https://creativecommons.org/publicdomain/zero/1.0/'
  version: '1.0'
  x-logo:
   url: 'https://o2r.info/api/logo.png'
servers:
  - url: 'https://o2r.uni-muenster.de/api/v1'
    description: The standard server for the o2r api
paths:
  #Compendium paths
  /compendium:
    post:
      tags:
        - Compendium
      summary: Upload via API
      description: |
        Upload a research workspace or full compendium as a compressed `.zip` archive with an HTTP `POST` request using `multipart/form-data`.  
      
        The upload is only allowed for logged in users. Upon successful extraction of archive and processing of the contents, the `id` for the new compendium is returned.
        
        <div style=
        ### &#x26A0; Required user level and authentication
        The user creating a new compendium must have the required user level. Requests must be authenticated with a cookie `connect.sid`, see user authentication.  
         
         
        ```
        curl -F "compendium=@compendium.zip;type=application/zip" \
            -F content_type=compendium \
            --cookie "connect.sid=<cookie string here>" \
            https://…/api/v1/compendium
        ```
        
        ```
        curl -F "compendium=@path/to/workspace.zip;type=application/zip" \
            -F content_type=workspace \
            --cookie "connect.sid=<cookie string here>" \
          https://…/api/v1/compendium 
        ```
        
      operationId: upload_compendium
      security: 
      - cookieAuth: []
      requestBody:
        description: Compendium to be uploaded.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_compendium'
      responses:
        200:
          description: upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_response'
              examples:
                upload_success:
                  $ref: '#/components/examples/upload_success'
        400:
          description: Bad Request due to not supported content_type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                bad_request_content_type:
                  $ref: '#/components/examples/bad_request_content_type'
        401:
          description: Unauthorized due to user not being logged in. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized: 
                  $ref: '#/components/examples/unauthorized'
        403:
          description: Forbidden due to user level not allowing upload 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized: 
                  $ref: '#/components/examples/upload_forbidden'
        422:
          description: Unprocessable Entity 
    get:
      tags:
      - Compendium
      summary: List compendium
      description: Returns up to 100 results by default.
      operationId: list_compendium
      parameters:
        - $ref: '#/components/parameters/job_id_query'
        - $ref: '#/components/parameters/user_query'
        - $ref: '#/components/parameters/doi_query'
        - $ref: '#/components/parameters/start_query'
        - $ref: '#/components/parameters/limit_query'
      responses:
        200:
          description: A json Array with the matching results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
              examples:
                list_success:
                  $ref: '#/components/examples/list_success'
                list_fail:
                  $ref: '#/components/examples/list_fail'
                  
  /compendium/{compendium_id}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
      - Compendium
      - Metadata
      summary: View compendium and metadata
      description: This includes the complete metadata set, related job ids and a tree representation of the included files. The created timestamp refers to the upload of the compendium. It is formated as ISO8601.
      operationId: view_compendium
      responses:
        200:
          description: Returns the matching Compendium.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view_response'
              examples:
                view_success:
                  $ref: '#/components/examples/view_success'
                view_metadata:
                  $ref: '#/components/examples/view_metadata'
      
        404:        
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'

    delete:
        tags:
        - Compendium
        summary: Delete compendium
        description: To delete a compendium candidate, an HTTP <code>DELETE</code> request can be send to the compendium endpoint.<div class="admonition note"><p class="admonition-title">Required user level for candidate deletion</p><p>The user deleting a candidate must be the author or have the required <a href="../../user/levels/">user level</a>.</p></div> <div class="admonition important"><p class="admonition-title">Important</p><p>Once a compendium is not a candidate anymore, it can only be deleted by admins with the required <a href="../../user/levels/">user level</a>.The compendium contents should be moved to a specific location to the server as a backup.</p></div>
        operationId: delete_compendium
        security:
          - cookieAuth: []
        responses:  
          204:
            description: Deletion successfull
          401:
            description: Unauthorized due to user not being logged in.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  delete_unauthorized:
                    $ref: '#/components/examples/unauthorized'
          403:
            description: Forbidden due to userlevel not being high enough.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  delete_unauthorized:
                    $ref: '#/components/examples/delete_forbidden'
          404:
            description: No compendium with the given id found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  view_success:
                    $ref: '#/components/examples/delete_not_found'
        
          
                  
  /compendium/{compendium_id}.{file_extension}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
      - $ref: '#/components/parameters/file_extension'
  /compendium/{compendium_id}/jobs:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
  /compendium/{compendium_id}/metadata:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
  /compendium/{compendium_id}/link:
      parameters:
      - $ref: '#/components/parameters/compendium_id'
  
  #Inspection paths
  /inspection/{compendium_id}:
     parameters:
      - $ref: '#/components/parameters/compendium_id'
      
  #Job paths
  /job: {}
  /job/{job_id}:
    parameters:
      - $ref: '#/components/parameters/job_id_path'
      
  #Recipient paths
  /recipient: {}
  
  #Shipment paths
  /shipment: {}
  '/shipment/{shipment_id}/status':
    parameters:
      - $ref: '#/components/parameters/shipment_id'
  /shipment/{shipment_id}/publishment:
   parameters:
      - $ref: '#/components/parameters/shipment_id'
  /shipment/{shipment_id}/files/{file_id}:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
      - $ref: '#/components/parameters/file_id'
  
  #Substitution paths
  /substitution: {}
  
  #User Paths
  /user: {}
  /user/{user_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'
      
  #Auth paths
  /auth/login: {}
  /auth/whoami: {}
  
components:
  schemas:
    #Request Bodies
    new_compendium:
      type: object
      properties:
        content_type:
          description: The Type of archive that is to be uploaded. Can be 'compendium' or 'workspace'.
                       <ul><li><code>compendium</code> - compendium,
                       which is expected to be complete and valid, for <em>examination</em> of a compendium</li>
                      <br>
                      <li><code>workspace</code> - formless workspace, for <em>creation</em> of a compendium</li>
                      </ul>
          type: string
          enum:
            - compendium
            - workspace
        compendium:
          description: The archive file as a compressed .zip
          type: string
          format: binary
    
    #Responses
    upload_response:
      type: object
      properties:
        id:
          type: string
    list_response:
      type: object
      properties:
        results:
          type: array
          items:
            type: string
    view_response:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/user_id'
        metadata:
          type: object
        created:
          type: string
          format: date-string
        user:
          type: string
        bag:
          type: boolean
        compendium:
          type: boolean
        substituted:
          type: boolean
        files:
          type: object
          
    #Errors
    general_error_model:
      type: object
      properties:
        error:
          type: string
          
    #Name tba
    user_id:
      type: string
      pattern: "^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$" #regex to much?
    
  parameters:
    #Query Parameters
    ##List Query Parameters 
    job_id_query:
      name: job_id
      in: query
      description: Comma-separated list of related job ids to filter by.
      required: false
      schema:
        type: string
    user_query: 
      name: user
      in: query
      description:  Public user identifier to filter by.
      required: false
      schema:
        type: string
    doi_query:
      name: doi
      in: query
      description: A DOI to filter by.
      required: false
      schema:
        type: string
    start_query:
      name: start
      in: query
      description: Starting point of the result list. <code>start - 1</code> results are skipped. Defaults to <code>1</code>.
      required: false
      schema:
        type: integer
        default: 1
    limit_query:
      name: limit
      in: query
      description: Limits the number of results in the response. Defaults to <code>100</code>.
      required: false
      schema:
        type: integer
        default: 100
    
    #Path Parameters
    compendium_id:
      name: compendium_id
      in: path
      description: Id of the compendium
      required: true
      schema:
        type: string
    file_extension:
      name: file_extension
      in: path
      description: File Extension for Compendium Download
      required: true
      schema:
        type: string
        enum:
        - zip
        - tar
        - tar.gz
    job_id_path:
      name: job_id
      in: path
      description: Id of the job
      required: true
      schema:
        type: string
    shipment_id:
      name: shipment_id
      in: path
      description: Id of the shipment
      required: true
      schema:
        type: string
    file_id:
      name: file_id
      in: path
      description: Id of the File
      required: true
      schema:
        type: string
    user_id:
      name: user_id
      in: path
      description: Id of the user
      required: true
      schema:
        type: string
    
  examples:
    #Response Examples
    ##Upload Response Examples
    upload_success:
      summary: A upload success example
      value: {'id': 'a4Nd1'}
    upload_forbidden:
      summary: A forbidden example
      value: {'error':'user level does not allow compendium creation'}
      
    ##List Response Examples
    list_success:
      summary: Successful Listing
      description: Returns all the matching compendia as an array
      value: {"results": ["nkm4b","nb2sm", ...]}
    list_fail:
      summary: No matching compendium found
      description: If there is no compendium found, the service returns an empty list.
      value: {"results": []}
      
    ##View Response Examples
    view_success:
      summary: A view success example
      description: Returns a object with informations about the matching compendium.
      value: {"id":"comid", "metadata": ..., "created":"2016-08-01T13:57:40.760Z", "user":"0000-0001-0273-7906", "files": ..., "bag": true, "compendium": true, "supstituted": true} #How to represent an object
    view_not_found:
      summary: A view not found example
      description: Returns a Error
      value: {"error":"no compendium with this id"}
      
    ##Delete Response Examples
    delete_forbidden:
      summary: A deletion forbidden example
      description: Returns a Error
      value: {"error":"user level not sufficient to delete compendium"}
    delete_not_found:
      summary: A deletion not found example
      description: Returns a Error
      value: {"error":"compendium not found"}
    
    ##Metadata Response Examples
    view_metadata:
      summary: An expanded example with metadata
      description: The metadata for an example compendium
      value: {"id":"12345","metadata": {"raw": {"title": "Programming with Data. Springer, New York, 1998. ISBN 978-0-387-98503-9.","author": "John M. Chambers","more content": ...,},"o2r": {"title": "Programming with Data","creators": [{"name": "John M. Chambers"}],"publication_date": 1998,"more content": ...,},"zenodo": {}},"created": …,"files": …}

    ##General Response Examples
    bad_request_content_type:
      summary: A bad request due to content_type
      value: {'error':'provided content_type not implemented'}
    unauthorized:
      summary: A unthorized error example
      value: {'error':'user is not authenticated'}
      
      
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
    
security: []
tags:
  - name: Metadata
    description: Metadata in a compendium is stored in a directory `.erc`.
externalDocs:
  description: Find more info in our documentation.
  url: 'https://o2r.info/api/'
