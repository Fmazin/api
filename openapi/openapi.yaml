openapi: 3.0.3
info:
  title: o2r web api
  description: |
    ## About

    The o2r web API acts as the interface between the o2r microservices and the web interface.

    The API provides services around the executable research compendium (ERC), or "compendium" for short, which is documented in the ERC spec.

    A good starting point for understanding the different parts of the API is the compendium life-cycle.

    ---
    ## Citation

    To cite this specification please use

    >_Nüst, Daniel, 2018. Reproducibility Service for Executable Research Compendia: Technical Specifications and Reference Implementation. Zenodo. doi:10.5281/zenodo.2203844_

    For a complete list of publications, posters, presentations, and software projects from th2 o2r project please visit https://o2r.info/results/.

    ---
    ## General

    The API is implemented as a RESTful API. The entrypoint for the current version is /api/v1.

    Unless specified otherwise, responses are always in JSON format. Body parameters in `POST` requests are expected in `multipart/form-data format.` Requests to the API should always be made with a secure connection using  `HTTPS`. Some requests require authentication with a specific user level.

    ---
    ## License

    ![Public Domain Button](https://licensebuttons.net/p/zero/1.0/88x31.png)

    The o2r Executable Research Compendium specification is licensed under Creative Commons CC0 1.0 Universal License, see file LICENSE. To the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work. This work is published from: Germany.

  termsOfService: ''
  contact: {}
  license:
    name: Creative Commons CC0 1.0 Universal License
    url: 'https://creativecommons.org/publicdomain/zero/1.0/'
  version: '1.0'
  x-logo:
   url: 'https://o2r.info/api/logo.png'
servers:
  - url: 'https://o2r.uni-muenster.de/api/v1'
    description: The standard server for the o2r api
paths:
  #Compendium paths
  /compendium:
    post:
      tags:
        - Compendium
      summary: Upload via API
      description: |
        Upload a research workspace or full compendium as a compressed `.zip` archive with an HTTP `POST` request using `multipart/form-data`.

        The upload is only allowed for logged in users. Upon successful extraction of archive and processing of the contents, the `id` for the new compendium is returned.

        <!--HTML is necessary, due to being essential for the notes-->
        <div class="note blue_note">
          <p><b>&#x26A0; Required user level and authentication</b></p>
          <p>The user creating a new compendium must have the required user level. Requests must be authenticated with a cookie <code>connect.sid</code>, see user authentication.</p>
        </div>


        ```
        curl -F "compendium=@compendium.zip;type=application/zip" \
            -F content_type=compendium \
            --cookie "connect.sid=<cookie string here>" \
            https://…/api/v1/compendium
        ```

        ```
        curl -F "compendium=@path/to/workspace.zip;type=application/zip" \
            -F content_type=workspace \
            --cookie "connect.sid=<cookie string here>" \
          https://…/api/v1/compendium
        ```
        <div class="note yellow_note">
          <p><b>&#x26A0; Important</b></p>
          <p>After successful upload the candidate process must be completed for workspaces.</p>
        </div>

        For local testing you can quickly upload some of the example compendia and workspaces from the erc-examples project.

      operationId: upload_compendium
      security:
      - cookie_authenification: []
      requestBody:
        description: |
          The Compendium to be uploaded.

        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_compendium'
      responses:
        200:
          description: upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_response'
              examples:
                upload_success:
                  $ref: '#/components/examples/upload_success'
        400:
          description: Bad Request due to not supported content_type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                bad_request_content_type:
                  $ref: '#/components/examples/bad_request_content_type'
        401:
          description: Unauthorized due to user not being logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/unauthorized'
        403:
          description: Forbidden due to user level not allowing upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/upload_forbidden'
        422:
          description: Unprocessable Entity
    get:
      tags:
      - Compendium
      summary: List compendium
      description: Returns up to 100 results by default.
      operationId: list_compendium
      parameters:
        - $ref: '#/components/parameters/job_id_query'
        - $ref: '#/components/parameters/user_query'
        - $ref: '#/components/parameters/doi_query'
        - $ref: '#/components/parameters/start_query'
        - $ref: '#/components/parameters/limit_query'
      responses:
        200:
          description: A json Array with the matching results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
              examples:
                list_success:
                  $ref: '#/components/examples/list_success'
                list_fail:
                  $ref: '#/components/examples/list_fail'

  /compendium/{compendium_id}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
      - Compendium
      summary: View a single compendium and metadata
      description: |
        This includes the complete metadata set, related job ids and a tree representation of the included files. The created timestamp refers to the upload of the compendium. It is formated as ISO8601.

        `curl https://…/api/v1/$ID`

      operationId: view_compendium
      responses:
        200:
          description: Returns the matching Compendium.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view_response'
              examples:
                view_success:
                  $ref: '#/components/examples/view_success'
                view_metadata:
                  $ref: '#/components/examples/view_metadata'

        404:
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'

    delete:
        tags:
        - Compendium
        summary: Delete compendium
        description: |
          To delete a compendium **candidate**, an HTTP <code>DELETE</code> request can be send to the compendium endpoint.

          <div class="note green_note">
            <p><b>&#x26A0; Important
            <p>Once a compendium is not a candidate anymore, it can only be deleted by admins with the required user level. The compendium contents should be moved to a specific location to the server as a backup.</p>
          </div>
          <div class="note blue_note">
            <p><b>&#x26A0; Required user level for candidate deletion</b></p>
            <p>The user deleting a candidate must be the author or have the required user level.</p>
          </div>

          ## Request

          The following request deletes the compendium with the identifier 12345, including metadata and files.

          ```
          curl -X DELETE https://…/api/v1/compendium/12345 \
          --cookie "connect.sid=<code string here>"

          ```

        operationId: delete_compendium
        security:
          - cookie_authenification: []
        responses:
          204:
            description: |
              The response has an HTTP status of `204` and an empty body for successful deletion.
          401:
            description: Unauthorized due to user not being logged in.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  delete_unauthorized:
                    $ref: '#/components/examples/unauthorized'
          403:
            description: Forbidden due to userlevel not being high enough.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  delete_unauthorized:
                    $ref: '#/components/examples/delete_forbidden'
          404:
            description: No compendium with the given id found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  view_success:
                    $ref: '#/components/examples/delete_not_found'

  /compendium/{compendium_id}.{file_extension}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
      - $ref: '#/components/parameters/file_extension'

    get:
      tags:
       - Compendium
      summary: Download compendium
      description: |
        Download compendium files as an archive.

        <div class="note yellow_note">
          <p><b>&#x26A0; Warning</b></p>
          <p>This download feature does not provide access to complete and valid compendia, because it does not comprise an update of the packaging, while it does include brokered metadata files. To download a valid compendium, create a shipment with the appropriate recipient.</p>
        </div>
        Supported formats are as follows:

        - `zip`
        - `tar`
        - `tar.gz`

        ## Request
        `GET /api/v1/compendium/$ID.zip`

        ```
        GET /api/v1/compendium/:id.zip
        GET /api/v1/compendium/:id.tar
        GET /api/v1/compendium/:id.tar.gz
        GET /api/v1/compendium/:id.tar?gzip
        GET /api/v1/compendium/:id.zip?image=false
        ```

      operationId: download_compendium
      parameters:
        - $ref: '#/components/parameters/gzip_query'
        - $ref: '#/components/parameters/image_query'
      responses:
        200:
          description: |
            The response is a file attachment. The suggested file name is available in the HTTP header content-disposition using the respective file extension for a file named with the compendium identifier (e.g. `wdpV9.zip`, `Uh1o0.tar`, or `LBIt1.tar.gz`).
          content:
            application/zip:
              examples:
                download_success:
                  $ref: '#/components/examples/download_success'
            application/x-tar:
              examples:
                download_success:
                 $ref: '#/components/examples/download_success'
            application/octet-stream:
              examples:
                download_success:
                 $ref: '#/components/examples/download_success'
        404:
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'
        
        400:
          description: A bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/download_bad_request' #Muss das hier geupdated werden?
                  
  /compendium/{compendium_id}/jobs:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
  /compendium/{compendium_id}/metadata:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
        - Compendium
      summary: Get the metadata acompendium
      description: |
        The following endpoint allows to access only the normative o2r-metadata element:
        
        `curl https://…/api/v1/$ID/metadata`
        
        `GET /api/v1/compendium/:id/metadata`
      operationId: get_metadata
      security:
        - cookie_authenification: []
      responses:
        200:
          description: The o2r-metadata object of the specified compendium
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_response'
              examples:
                metadata_success:
                  $ref: '#/components/examples/metadata_success'
                metadata_spatial:
                  $ref: '#/components/examples/metadata_spatial'
        404:
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'
        
    put:
      tags:
        - Compendium
      summary: Update the metadata acompendium
      description: |
        The following endpoint can be used to update the `o2r` metadata elements.
        All other metadata sub-properties are only updated by the service itself, i.e. brokered metadata.
        After creation the metadata is persisted to both files and database, so updating the metadata via this endpoint allows to trigger a brokering process and to retrieve different metadata formats either via this metadata API or via downloading the respective file using the download endpoint.
        
        <div class="note blue_note">
          <p><b>&#x26A0; Metadata update rights</b></p>
          <p> Only authors of a compendium or users with the required user level can update a compendium's metadata.</p>
        </div>
        
        ### Metadata update request
        
        ```
        curl -H 'Content-Type: application/json' \
          -X PUT \
          --cookie "connect.sid=<code string here>" \
          -d '{ "o2r": { "title": "Blue Book" } }' \
          /api/v1/compendium/:id/metadata
        ```
        The request overwrites the existing metadata properties, so the full o2r metadata must be put with a JSON object called `o2r` at the root, even if only specific fields are changed.
      security:
        - cookie_authenification: []
      responses:
        200:
          description: Successfull metdata update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_response'
              examples:
                metadata_update_success:
                  $ref: '#/components/examples/metadata_update_success' 
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                metadata_unauthorized:
                  $ref: '#/components/examples/metadata_unauthorized' 
        400:
          description: Bad Request
          content:
            application/json:
              examples:
                metadata_bad_request_incomplete_metadata:
                  $ref: '#/components/examples/metadata_bad_request_incomplete_metadata'
                metadata_bad_request_syntax_error:
                  $ref: '#/components/examples/metadata_bad_request_syntax_error'
        422:
          description: Unprocessable Enitity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                metadata_unprocessable_entity:
                  $ref: '#/components/examples/metadata_unprocessable_entity' 
  /compendium/{compendium_id}/link:
      parameters:
      - $ref: '#/components/parameters/compendium_id'

  #Inspection paths
  /inspection/{compendium_id}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
        - Compendium
      summary: Compendium file listing
      description: |
        The file listing is returned in the single view of a job or compendium. It includes the complete content of the bagtainer in its current state.
        If a job has been run and the programme outputs new data, this new data is included as well.
        
        File listings are represented as a Object. The file structure for a synthetic job `nj141` is as follows.
        
        ```text
        nj141
        ├── bagit.txt
        └── data
            ├── paper.Rmd
            └── Dockerfile
        ```
        
        is be represented as
        
        ```json
        {
          "path": "/api/v1/job/nj141/data",
          "name": "nj141",
          "children": [
            {
              "path": "/api/v1/job/nj141/data/bagit.txt",
              "name": "bagit.xt",
              "type": "text/plain",
              "size": 55
            },
            {
              "path": "/api/v1/job/nj141/data/data",
              "name": "data",
              "children": [
                {
                  "path": "/api/v1/job/nj141/data/data/paper.Rmd",
                  "name": "paper.Rmd",
                  "type": "text/plain",
                  "size": 346512
                }
                {
                  "path": "/api/v1/job/nj141/data/data/Dockerfile",
                  "name": "Dockerfile",
                  "type": "text/plain",
                  "size": 1729
                }
              ]
            }
          ]
        }
        ```
        
        ## `path` property
        
        The `path` property for each file in the listing is a link to the raw file. Additionally the `GET` parameter `?size=…` can be appended to retrieve previews of the files. In the case of Images (`png`, `jpg`, `gif`, `tiff`), the value defines the maximum width/height. For text files (`txt`, `csv`, scripts), the value defines the amount of lines returned.
        
        ### `type` property
        
        The `type` property is a best guess for the MIME type of the file content. It is a result of the files extension. Look at the list of extension to type mapping below.
        
        ## File extension to MIME type mappings
        
        This list contains the custom mapping of file extensions to MIME types used in the server.
        
        | Extension        | MIME type          |
        |------------------|--------------------|
        | `.R`, `.r`       | `script/x-R`       |
        |  `.RData`, `.Rdata`, `.rdata`, `.rda`   |  `application/x-r-data`  |
        
        ## File inspection: RData

        `.RData` files are a [binary format](https://stat.ethz.ch/R-manual/R-devel/library/base/html/save.html) for usage with R to save any kind of object (data, functions) using an internal serialisation.
        The format is [not suitable](https://www.loc.gov/preservation/digital/formats/fdd/fdd000470.shtml) for archival or data exchange, but might be included in a compendium out of negligence by or convenience for the author.
        
        Since the file format is binary and not readable by non-R client applications, the API provides the endpoint `/api/v1/inspection` to retrieve a JSON representation of the objects in an RData file.
        
        Values of objects are provided as JSON arrays following the specifications by the R package [`jsonlite`](https://cran.r-project.org/package=jsonlite).
      operationId: get_file
      parameters:
        - $ref: '#/components/parameters/file_query'
        - $ref: '#/components/parameters/objects_query'
      responses:
        200: 
          description: Returns the file is represented as a JSON array
          content:
            application/json:
              examples:
                files_simple:
                  $ref: '#/components/examples/files_simple'
                files_complex_1:
                  $ref: '#/components/examples/files_complex_1'
                files_complex_2:
                  $ref: '#/components/examples/files_complex_2'
                files_objects_errors:
                  $ref: '#/components/examples/files_objects_errors'
                
        400:
          description: Returns the file is represented as a JSON array
          content:
            application/json:
              examples:
                files_simple:
                  $ref: '#/components/examples/files_bad_request_1'
                files_complex_1:
                  $ref: '#/components/examples/files_bad_request_2'
                files_complex_2:
                  $ref: '#/components/examples/files_bad_request_3'
        500:
          description: Returns the file is represented as a JSON array
          content:
            application/json:
              examples:
                files_simple:
                  $ref: '#/components/examples/files_server_error'

  #Job paths
  /job: {}
  /job/{job_id}:
    parameters:
      - $ref: '#/components/parameters/job_id_path'

  #Recipient paths
  /recipient: {}

  #Shipment paths
  /shipment: {}
  /shipment/{shipment_id}/status:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
  /shipment/{shipment_id}/publishment:
   parameters:
      - $ref: '#/components/parameters/shipment_id'
  /shipment/{shipment_id}/files/{file_id}:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
      - $ref: '#/components/parameters/file_id'

  #Substitution paths
  /substitution: {}

  #User Paths
  /user: {}
  /user/{user_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'

  #Auth paths
  /auth/login: {}
  /auth/whoami: {}

components:
  schemas:
    #Request Bodies
    new_compendium:
      type: object
      properties:
        content_type:
          description: |
            The Type of archive that is to be uploaded. Can be `compendium` or `workspace`.
            - `compendium` - compendium,
            which is expected to be complete and valid, for *examination* of a compendium

            - `workspace` - formless workspace, for *creation* of a compendium

            <div class="note yellow_note">
              <p><b>&#x26A0; Warning</b></p>
              <p>If a complete ERC is submitted as a workspace, it may result in an error, or the contained metadata and other files may be overwritten by the creation process.</p>
            </div>

          type: string
          enum:
            - compendium
            - workspace
        compendium:
          description: The archive file as a compressed .zip
          type: string
          format: binary

    #Responses
    upload_response:
      type: object
      properties:
        id:
          type: string
    list_response:
      type: object
      properties:
        results:
          type: array
          items:
            type: string
    view_response:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/user_id'
        metadata:
          type: object
        created:
          type: string
          format: date-string
        user:
          type: string
        bag:
          type: boolean
        compendium:
          type: boolean
        substituted:
          type: boolean
        files:
          type: object
    metadata_response:
      type: object
      properties:
        id:
          type: string
        metadata:
          type: object
          properties:
            o2r:
              type: object
    #Errors
    general_error_model:
      type: object
      properties:
        error:
          type: string

    #Name tba
    user_id:
      type: string
      pattern: "^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$" #regex to much?

  parameters:
    #Query Parameters
    ##List Query Parameters
    job_id_query:
      name: job_id
      in: query
      description: Comma-separated list of related job ids to filter by.
      required: false
      schema:
        type: string
    user_query:
      name: user
      in: query
      description:  Public user identifier to filter by.
      required: false
      schema:
        type: string
    doi_query:
      name: doi
      in: query
      description: A DOI to filter by.
      required: false
      schema:
        type: string
    start_query:
      name: start
      in: query
      description: Starting point of the result list. <code>start - 1</code> results are skipped. Defaults to <code>1</code>.
      required: false
      schema:
        type: integer
        default: 1
    limit_query:
      name: limit
      in: query
      description: Limits the number of results in the response. Defaults to <code>100</code>.
      required: false
      schema:
        type: integer
        default: 100

    ##Download Parameters
    gzip_query:
      name: gzip
      in: query
      description: |
        *only for .tar endpoint* - compress tarball with gzip
      required: false
      schema:
        type: string
    image_query:
      name: image
      in: query
      description: |
        `?image=true` or `?image=false` - include tarball of Docker image in the archive , default is true
      required: false
      schema:
        type: boolean
        default: true
    
    ##File Parameters
    file_query:
      name: file
      in: query
      description: |
        the name of the file to inspect, or a relative path to a file within the compendium
      required: true
      schema:
        type: string
    objects_query:
      name: objects
      in: query
      description: |
        the name of objects in the file
      required: false
      schema:
        type: string
    
    #Path Parameters
    compendium_id:
      name: compendium_id
      in: path
      description: Id of the compendium
      required: true
      schema:
        type: string
    file_extension:
      name: file_extension
      in: path
      description: File Extension for Compendium Download
      required: true
      schema:
        type: string
        enum:
        - zip
        - tar
        - tar.gz
    job_id_path:
      name: job_id
      in: path
      description: Id of the job
      required: true
      schema:
        type: string
    shipment_id:
      name: shipment_id
      in: path
      description: Id of the shipment
      required: true
      schema:
        type: string
    file_id:
      name: file_id
      in: path
      description: Id of the File
      required: true
      schema:
        type: string
    user_id:
      name: user_id
      in: path
      description: Id of the user
      required: true
      schema:
        type: string

  examples:
    #Response Examples
    ##Upload Response Examples
    upload_success:
      summary: A upload success example
      value: {'id': 'a4Nd1'}
    upload_forbidden:
      summary: A forbidden example
      value: {'error':'user level does not allow compendium creation'}

    ##List Response Examples
    list_success:
      summary: Successful Listing
      description: Returns all the matching compendia as an array
      value: {"results": ["nkm4b","nb2sm", ...]}
    list_fail:
      summary: No matching compendium found
      description: |
        If there is no compendium found, the service returns an empty list.\
        `GET /api/v1/compendium?doi=not_a_doi`
      value: {"results": []}

    ##View Response Examples
    view_success:
      summary: A view success example
      description: Returns a object with informations about the matching compendium.
      value: {"id":"comid", "metadata": ..., "created":"2016-08-01T13:57:40.760Z", "user":"0000-0001-0273-7906", "files": ..., "bag": true, "compendium": true, "supstituted": true} #How to represent an object
    view_not_found:
      summary: A not found example
      description: Returns an error
      value: {"error":"no compendium with this id"}

    ##Delete Response Examples
    delete_forbidden:
      summary: A deletion forbidden example
      description: Returns an error
      value: {"error":"user level not sufficient to delete compendium"}
    delete_not_found:
      summary: A deletion not found example
      description: Returns an error
      value: {"error":"compendium not found"}

    ##Metadata Response Examples
    view_metadata:
      summary: An expanded example with metadata
      description: The metadata for an example compendium
      value: {"id":"12345","metadata": {"raw": {"title": "Programming with Data. Springer, New York, 1998. ISBN 978-0-387-98503-9.","author": "John M. Chambers","more content": ...,},"o2r": {"title": "Programming with Data","creators": [{"name": "John M. Chambers"}],"publication_date": 1998,"more content": ...,},"zenodo": {}},"created": …,"files": …}
      
    metadata_success:
      summary: A success metadata example
      description: |
        Returns a json object with the metadata
      value:
        {
          "id":"compendium_id",
          "metadata": {
            "o2r": {
              "...":"..."
            }
          }
        }
        
    metadata_spatial:
      summary: Spatial property of the metadata object
      description: |
        For discovery purposes, the metadata includes extracted GeoJSON bounding boxes based on data files in a workspace.
        
        Currently supported spatial data sources:
        
        - shapefiles
        
        The following structure is made available per file.
        
        The `spatial` key has a `union` bounding box, that wraps all extracted bounding boxes.
      value: |
        {
          "id":"compendium_id",
          "metadata": {
            "o2r": {
              "spatial": {
                  "files": [
                      {
                          "geojson": {
                              "bbox": [
                                  -2.362060546875,
                                  52.0862573323384,
                                  -1.285400390625,
                                  52.649729197309426
                              ],
                              "geometry": {
                                  "coordinates": [
                                      [
                                          [
                                              -2.362060546875,
                                              52.0862573323384
                                          ],
                                          [
                                              -1.285400390625,
                                              52.649729197309426
                                          ]
                                      ]
                                  ],
                                  "type": "Polygon"
                              },
                              "type": "Feature"
                          },
                          "source_file": "path/to/file1.geojson"
                      },
                      {
                          "geojson": {
                              "bbox": [
                                  7.595369517803192,
                                  51.96245837645124,
                                  7.62162297964096,
                                  51.96966694957956
                              ],
                              "geometry": {
                                  "coordinates": [
                                      [
                                          [
                                              7.595369517803192,
                                              51.96245837645124
                                          ],
                                          [
                                              7.62162297964096,
                                              51.96966694957956
                                          ]
                                      ]
                                  ],
                                  "type": "Polygon"
                              },
                              "type": "Feature"
                          },
                          "source_file": "path/to/file2.shp"
                      }
                  ],
                  "union": {
                      "geojson": {
                          "bbox": [
                              -2.362060546875,
                              51.96245837645124,
                              7.62162297964096,
                              51.96245837645124
                          ],
                          "geometry": {
                              "coordinates": [
                                  [
                                      -2.362060546875,
                                      51.96245837645124
                                  ],
                                  [
                                      7.62162297964096,
                                      51.96245837645124
                                  ],
                                  [
                                      7.62162297964096,
                                      52.649729197309426
                                  ],
                                  [
                                      -2.362060546875,
                                      52.649729197309426
                                  ]
                              ],
                              "type": "Polygon"
                          },
                          "type": "Feature"
                      }
                  }
              }
              "...":"..."
            }
          }
        }
        
    metadata_update_success:
      summary: A success metadata update example
      description: Returns a json object with the updated excerpt.
      value: |
        {
          "id":"compendium_id",
          "metadata": {
            "o2r": {
              "title": "Blue Book"
            }
          }
        }
        
    metadata_unauthorized:
      summary: Unauthorized 
      description: Returns an error, due to not being authorized
      value: {"error":"not authorized"}
      
    metadata_bad_request_incomplete_metadata:
      summary: Bad Request due to Incomplete metadata
      description: Returns an error due to missing metadata in the request (e.g. description property missing)
      value: |
        {
            "error":"Error updating metadata file, see log for details",
            "log": "[o2rmeta] 20180302.085940 received arguments: {'debug': True, 'tool': 'validate', 'schema': 'schema/json/o2r-meta-schema.json', 'candidate': '/tmp/o2r/compendium/1cAIr/data/.erc/metadata_o2r_1.json'}
            [o2rmeta] 20180302.085940 launching validator
            [o2rmeta] 20180302.085940 checking metadata_o2r_1.json against o2r-meta-schema.json
            [o2rmeta] 20180302.085940 !invalid: None is not of type 'string'
        
            Failed validating 'type' in schema['properties']['description']:
                {'type': 'string'}
        
                On instance['description']:
                    None"
        }
        
    metadata_bad_request_syntax_error:
      summary: Syntax error
      value: | 
        "SyntaxEroor [...]"
        
    metadata_unprocessable_entity:
      summary: Unporcessable Entity in metadata update
      description: |
        The JSON doesnt meet the requirements.
      value: {"error":"JSON with root element 'o2r' required"}
    
    ##Download Response Example
    download_success:
      summary: A successfull zip-file Download example
      description: |
        A successfull download of a compendium as a `.zip` file. 
        
        The zip file contains a comment with the original URL.
        ```
        $ unzip -z CXE1c.zip
        Archive:  CXE1c.zip
        Created by o2r [https://…/api/v1/compendium/CXE1c.zip]
        ```
      value: |
        Content-Type: application/zip
        Transfer-Encoding: chunked
        Content-Disposition: attachment; filename="$ID.zip"
        X-Response-Time: 13.556ms
        
    download_bad_request:
      summary: A bad request for download example
      description: Returns an error
      value: {"error":"no job found for this compendium, run a job before downloading with image"}
      
    ##Files Response Examples
    files_simple:
      summary: Simple data type example
      description: |
        Returns a JSON array representation of the data types.
        
        `GET /api/v1/inspection/<compendium id>?file=simple.Rdata`
        
      value: |
        {  
          "aChar":[  
            "a"
          ],
          "aDouble":[  
            2.3
          ],
          "anInteger":[  
            1
          ],
          "aString":[  
            "The force is great in o2r."
          ]
        }
        
    files_complex_1:
      summary: Complex data type example
      description: |
        Lists are be nested objects, and vectors are JSON arrays (see jsonlite docs for details, defaults are used):

        `GET /api/v1/inspection/<compendium id>?file=complex.Rdata`
      value: |
        {  
          "characterVector":[  
            "one",
            "two",
            "3"
          ],
          "logicalVector":[  
            true,
            true,
            false
          ],
          "numericVector":[  
            1,
            2,
            -7,
            0.8
          ],
          "orderedList":{  
            "name":[  
              "Fred"
            ],
            "mynumbers":[  
              1,
              2
            ],
            "age":[  
              5.3
            ]
          }
        }
        
    files_complex_2:
      summary: Complex data type example
      description: |
        Data frames and matrices are mapped to JSON arrays of complex objects (see jsonlite docs for details, defaults are used):

        `GET /api/v1/inspection/<compendium id>?file=matrices.Rdata`
      value: |
        {  
          "dataFrame":[  
            {  
              "ID":1,
              "Passed":true,
              "Colour":"red"
            },
            {  
              "ID":2,
              "Passed":true,
              "Colour":"white"
            },
            {  
              "ID":3,
              "Passed":true,
              "Colour":"red"
            },
            {  
              "ID":4,
              "Passed":false
            }
          ],
          "namedMatrix":[  
            [  
              1,
              26
            ],
            [  
              24,
              68
            ]
          ]
        }
      
    files_objects_errors:
      summary: Example with objects error
      description: |
        If selected objects are not loadable from the file, an errors property in the response is given for each problematic object:

        `GET /api/v1/inspection/<compendium id>?file=simple.RData&objects=bar,anInteger,foo`

      value: |
        {  
          "anInteger":[  
            1
          ],
          "errors":[  
            "Error: Object 'bar' does not exist in the file simple.RData",
            "Error: Object 'foo' does not exist in the file simple.RData"
          ]
        }
        
    files_bad_request_1:
      summary: Parameter missing
      value: {"error": "Query parameter 'file' missing"}
    files_bad_request_2:
      summary: File does not exists
      value: {"error": "file 'not_available.Rdata' does not exist in compendium kOSMO"}
    files_bad_request_3:
      summary: Compendium does not exists
      value: {"error": "compendium '12345' does not exist"}
    files_server_error:
      summary: Internal Server Error
      value: {"error": "Error loading objects"}
      
    ##General Response Examples
    bad_request_content_type:
      summary: A bad request due to content_type
      value: {'error':'provided content_type not implemented'}
    unauthorized:
      summary: A unthorized error example
      value: {'error':'user is not authenticated'}


  securitySchemes:
    cookie_authenification:
      type: apiKey
      in: cookie
      name: connect.sid

security: []
tags: []
externalDocs:
  description: Find more info in our documentation.
  url: 'https://o2r.info/api/'
