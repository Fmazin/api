{
    "docs": [
        {
            "location": "/",
            "text": "Current version of the API: v1\n\n\nThe o2r web API acts as the interface between the \no2r\n \nmicroservices\n and the \nweb interface\n. It includes functionality to \nupload\n and examine \nexecutable research compendia\n and run and examine \nexecution jobs\n.\n\n\nIt is implemented as a RESTful API. The entrypoint for the current version is \n/api/v1\n.\n\n\nUnless specified otherwise, responses will always be in JSON format.\nBody parameters in \nPOST\n requests are expected in \nmultipart/form-data\n format.\nRequests to the API should always be made with a secure connection, i.e. HTTPS.\n\n\nWe also provide a \nsimple Postman collection\n (\ngetpostman.com\n), so that you can comfortably explore the API.",
            "title": "Index"
        },
        {
            "location": "/upload/",
            "text": "Upload\n\n\nCompendium\n\n\nStability:\n 0 - subject to changes\n\n\nUpload a unvalidated research compendium as a compressed \n.zip\n archive.\n\n\nThe upload is only allowed for logged in users. To run the upload from the command line, login on the website and open you browser cookies. Find a cookie issued by \no2r.uni-muenster.de\n with the name \nconnect.sid\n. Copy the contents of the cookie into the request example below.\n\n\nUpon successful extraction of archive, the \nid\n for the new compendium is returned.\n\n\ncurl -F \"compendium=@compendium.zip;type=application/zip\" \\\n    -F content_type=compendium_v1 http://\u2026/api/v1/compendium \\\n    --cookie \"connect.sid=<code string here>\" \\\n     http://\u2026/api/v1/compendium \n\n\n\n\n200 OK\n\n{\"id\":\"a4Ndl\"}\n\n\n\n\nBody parameters\n\n\n\n\ncompendium\n - The archive file\n\n\ncontent_type\n - Form of archive. One of the following:\n\n\ncompendium_v1\n - \ndefault\n - compendium in Bagtainer format\n\n\nworkspace\n - \n[NOT IMPLEMENTED]\n - formless workspace\n\n\n\n\nError responses\n\n\n401 Unauthorized\n\n{\"error\":\"missing or wrong api key\"}\n\n\n\n\nExample data\n\n\nFor local testing you can quickly upload some of the example compendia using a Docker image that is part of the \no2r-bagtainers\n project.\nThe following command executes the container and uploads 7 empty examples and two selected bagtainers to a server running at the Docker host IP.\n\n\ndocker run --rm o2rproject/examplecompendia -c <my cookie> -e 7 -b 0003 -b 0004 -b 0005\n\n\n\n\nFor more configuration details, see the project's README file.",
            "title": "Upload"
        },
        {
            "location": "/upload/#upload",
            "text": "",
            "title": "Upload"
        },
        {
            "location": "/upload/#compendium",
            "text": "Stability:  0 - subject to changes  Upload a unvalidated research compendium as a compressed  .zip  archive.  The upload is only allowed for logged in users. To run the upload from the command line, login on the website and open you browser cookies. Find a cookie issued by  o2r.uni-muenster.de  with the name  connect.sid . Copy the contents of the cookie into the request example below.  Upon successful extraction of archive, the  id  for the new compendium is returned.  curl -F \"compendium=@compendium.zip;type=application/zip\" \\\n    -F content_type=compendium_v1 http://\u2026/api/v1/compendium \\\n    --cookie \"connect.sid=<code string here>\" \\\n     http://\u2026/api/v1/compendium   200 OK\n\n{\"id\":\"a4Ndl\"}",
            "title": "Compendium"
        },
        {
            "location": "/upload/#body-parameters",
            "text": "compendium  - The archive file  content_type  - Form of archive. One of the following:  compendium_v1  -  default  - compendium in Bagtainer format  workspace  -  [NOT IMPLEMENTED]  - formless workspace",
            "title": "Body parameters"
        },
        {
            "location": "/upload/#error-responses",
            "text": "401 Unauthorized\n\n{\"error\":\"missing or wrong api key\"}",
            "title": "Error responses"
        },
        {
            "location": "/upload/#example-data",
            "text": "For local testing you can quickly upload some of the example compendia using a Docker image that is part of the  o2r-bagtainers  project.\nThe following command executes the container and uploads 7 empty examples and two selected bagtainers to a server running at the Docker host IP.  docker run --rm o2rproject/examplecompendia -c <my cookie> -e 7 -b 0003 -b 0004 -b 0005  For more configuration details, see the project's README file.",
            "title": "Example data"
        },
        {
            "location": "/public-share/",
            "text": "Public share\n\n\nCompendium\n\n\nStability:\n 0 - subject to changes\n\n\nUpload an unvalidated research compendium by submitting a link to a cloud resource. Currently, only sciebo (https://www.sciebo.de/en/) is supported.\n\n\nThe upload is only allowed for logged in users. To run the upload from the command line, login on the website and open you browser cookies. Find a cookie issued by \no2r.uni-muenster.de\n with the name \nconnect.sid\n. Copy the contents of the cookie into the request example below.\n\n\nUpon successful download from the public share, the \nid\n for the new compendium is returned.\n\n\ncurl -F share_url=https://uni-muenster.sciebo.de/index.php/s/7EoWgjLSFVV89AO \\\n    -F content_type=compendium_v1 http://\u2026/api/v1/public-share \\\n    --cookie \"connect.sid=<code string here>\" \\\n     http://\u2026/api/v1/public-share\n\n\n\n\n200 OK\n\n{\"id\":\"b9Faz\"}\n\n\n\n\nBody parameters\n\n\n\n\nshare_url\n - The sciebo link to the public share\n\n\ncontent_type\n - Form of archive. One of the following:\n\n\ncompendium_v1\n - \ndefault\n - compendium in Bagtainer format\n\n\nworkspace\n - \n[NOT IMPLEMENTED]\n - formless workspace\n\n\n\n\nError responses\n\n\n401 Unauthorized\n\n{\"error\":\"unauthorized: user level does not allow compendium creation\"}\n\n\n\n\n403 Forbidden\n\n{\"error\":\"public share host is not allowed\"}\n\n\n\n\nExample data\n\n\nFor testing purposes you can the following sciebo public share. It contains a few ready-to-use compendia found in the \no2r-bagtainers\n project:\n\n\nhttps://uni-muenster.sciebo.de/index.php/s/7EoWgjLSFVV89AO\n\n\nFor more configuration details, see the project's README file.",
            "title": "Public share"
        },
        {
            "location": "/public-share/#public-share",
            "text": "",
            "title": "Public share"
        },
        {
            "location": "/public-share/#compendium",
            "text": "Stability:  0 - subject to changes  Upload an unvalidated research compendium by submitting a link to a cloud resource. Currently, only sciebo (https://www.sciebo.de/en/) is supported.  The upload is only allowed for logged in users. To run the upload from the command line, login on the website and open you browser cookies. Find a cookie issued by  o2r.uni-muenster.de  with the name  connect.sid . Copy the contents of the cookie into the request example below.  Upon successful download from the public share, the  id  for the new compendium is returned.  curl -F share_url=https://uni-muenster.sciebo.de/index.php/s/7EoWgjLSFVV89AO \\\n    -F content_type=compendium_v1 http://\u2026/api/v1/public-share \\\n    --cookie \"connect.sid=<code string here>\" \\\n     http://\u2026/api/v1/public-share  200 OK\n\n{\"id\":\"b9Faz\"}",
            "title": "Compendium"
        },
        {
            "location": "/public-share/#body-parameters",
            "text": "share_url  - The sciebo link to the public share  content_type  - Form of archive. One of the following:  compendium_v1  -  default  - compendium in Bagtainer format  workspace  -  [NOT IMPLEMENTED]  - formless workspace",
            "title": "Body parameters"
        },
        {
            "location": "/public-share/#error-responses",
            "text": "401 Unauthorized\n\n{\"error\":\"unauthorized: user level does not allow compendium creation\"}  403 Forbidden\n\n{\"error\":\"public share host is not allowed\"}",
            "title": "Error responses"
        },
        {
            "location": "/public-share/#example-data",
            "text": "For testing purposes you can the following sciebo public share. It contains a few ready-to-use compendia found in the  o2r-bagtainers  project:  https://uni-muenster.sciebo.de/index.php/s/7EoWgjLSFVV89AO  For more configuration details, see the project's README file.",
            "title": "Example data"
        },
        {
            "location": "/job/",
            "text": "Job\n\n\nStability:\n 0 - subject to changes\n\n\nExecution jobs are used to execute a research compendium. When a new execution job is started, the contents of the research compendium are cloned to create a trackable execution. The status information, logs and final working directory data are saved in their final state, so that they can be reviewed later on.\n\n\nAll execution jobs are tied to a single research compendium and reflect the execution history of that research compendium.\n\n\nA trivial execution job would be a completely unmodified research compendium, to test the reproducibility of a research compendium.\n\n\n(A \npotential\n future feature would be that the input data (input files, datasets, parameters) can be altered to run a modified execution job. This functionality is not yet implemented.)\n\n\nSteps\n\n\nOne job consists of a series of steps. All of these steps can be in one of three status: \nrunning\n, \nfailure\n, or \nsuccess\n. The are executed in order.\n\n\n\n\nvalidate_bag\n\n  Validate the BagIt bag based on npm's \nbagit\n.\n\n\nvalidate_compendium\n\n  Parses and validate the bagtainer configuration and metadta.\n\n\nimage_prepare\n\n  Create an archive of the payload of the BagIt bag, which allows to build and run the image also on remote Docker hosts.\n\n\nimage_build\n\n  Send the bag's payload as a tarballed archive to Docker to build an image, which is tagged \nbagtainer:<jobid>\n.\n\n\nimage_execute\n\n  Run the container and return based on status code of program that ran inside the container.\n\n\ncleanup\n\n  Remove image or job files (depending on server-side settings).\n\n\n\n\nNew job\n\n\nCreate and run a new execution job. Requires a \ncompendium_id\n.\n\n\ncurl -F compendium_id=$ID https://\u2026/api/v1/job\n\n\nPOST /api/v1/job\n\n\n200 OK\n\n{\"job_id\":\"ngK4m\"}\n\n\n\n\nBody parameters\n\n\n\n\ncompendium_id\n - The \nid\n of the compendium to base this job on.\n\n\nsteps\n - \nTODO\n select steps that will be executed (skip some steps in successive executions?)\n\n\ninputs\n - \nproposal\n - Array with one or more \nFileDescriptor\n.\n\n\n\n\nError responses\n\n\n404 Not Found\n\n{\"error\":\"no compendium with this ID found\"}\n\n\n\n\n500 Internal Server Error\n\n{\"error\":\"could not create job\"}\n\n\n\n\nList jobs\n\n\nStability:\n 0 - subject to changes\n\n\nLists jobs. Will return up to 100 results by default.\n\n\nFor pagination purposes, URLs for previous and next results are provided if applicable. Results will be sorted by descending date of last change. Results can be filtered by one or more compendiums, i.e. parameter \ncompendium_id\n, as well as by \nstate\n.\nThe content of the response can be limited to certain properties of each result by providing a list of fields, i.e. the parameter \nfields\n.\n\n\ncurl -F compendium_id=$ID https://\u2026/api/v1/job?limit=100&start=2&compendium_id=$ID&state=success\n\n\nGET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&state=success\n\n\n200 OK\n\n{\n  \"results\":[\n    \"nkm4L\",\n    \"asdi5\",\n    \"nb2sg\",\n    \u2026\n  ],\n  \"next\":\"/api/v1/job?limit=100&start=3\",\n  \"previous\":\"/api/v1/job?limit=100&start=1\"\n}\n\n\n\n\nGET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&state=success&fields=state\n\n\n200 OK\n\n{\n  \"results\":[\n    {\n      \"id\":\"nkm4L\",\n      \"state\":\"failure\"\n    },\n    {\n      \"id\":\"asdi5\",\n      \"state\":\"success\"\n    },\n    {\n      \"id\":\"nb2sg\",\n      \"state\":\"running\"\n    },\n    \u2026\n  ],\n  \"next\":\"/api/v1/job?limit=100&start=3&fields=state\",\n  \"previous\":\"/api/v1/job?limit=100&start=1&fields=state\"\n}\n\n\n\n\nGET parameters\n\n\n\n\ncompendium_id\n - Comma-separated list of related compendium ids to filter by.\n\n\nstart\n - List from specific search result onwards. 1-indexed. Defaults to 1.\n\n\nlimit\n - Specify maximum amount of results per page. Defaults to 100.\n\n\nstate\n - Specify state to filter by. Can contain following states: \nsuccess\n, \nfailure\n, \nrunning\n.\n\n\nfields\n - Specify if/which additional attributes results should contain. Allowed values are \nstate\n. Defaults to none (\n \n).\n\n\n\n\nState\n\n\nShows the overall state of a job.\n\n\nThe status will be one of following:\n\n\n\n\nsuccess\n - if state of all steps is \nsuccess\n.\n\n\nfailure\n - if state of at least one step is \nfailure\n.\n\n\nrunning\n - if state of at least one step is \nrunning\n and no state is \nfailure\n.\n\n\n\n\nMore information about \nsteps\n can be found in subsection \nSteps\n of section \nView single job\n.\n\n\nView single job\n\n\nStability:\n 0 - subject to changes\n\n\nView details for a single job. Filelisting format is described in \nFiles\n\n\ncurl https://\u2026/api/v1/job/$ID\n\n\nGET /api/v1/job/:id\n\n\n200 OK\n\n{\n  \"id\":\"nkm4L\",\n  \"compendium_id\":\"a4Dnm\",\n  \"creation_date\": Date,\n  \"state\": \"fail\",\n  \"steps\":{\n    \"unpack\":{\n      \"status\":\"failure\",\n      \"start\": Date,\n      \"end\": Date,\n      \"text\":\"not a valid archive\"\n    },\n    \u2026\n  },\n  \"files\":{\n    {FileListing}\n  }\n}\n\n\n\n\nURL parameters\n\n\n\n\n:id\n - id of the job to be viewed\n\n\n\n\nSteps\n\n\nThe answer will contain information to the following \nsteps\n:\n\n\n\n\nvalidate_bag\n\n\nvalidate_compendium\n\n\nimage_prepare\n\n\nimage_build\n\n\nimage_execute\n\n\ncleanup\n\n\n\n\nTheir status will be one of:\n\n\n\n\nqueued\n\n\nrunning\n\n\nsuccess\n\n\nfailure\n\n\nwarning\n\n\nskip\n\n\n\n\nAdditional explanations to their state will be transmitted in the \ntext\n property. The \nstart\n and \nend\n timestamps indicate the start and end time of the step. They are formatted as ISO8601.\n\n\nError responses\n\n\n404 Not Found\n\n{\"error\":\"no compendium with this ID found\"}\n\n\n\n\nJob status updates\n\n\nYou can subscribe to real time status updates on jobs using \nWebSockets\n. The implementation is based on \nsocket.io\n and using their client is recommended.\n\n\nThe job log is available at \nhttps://o2r.uni-muenster.de\n under the namespace \napi/v1/logs/job\n.\n\n\n# create a socket.io client:\nvar socket = io('https://o2r.uni-muenster.de/api/v1/logs/job');\n\n\n\n\nTODO\n: add documentation on messages on the socket.",
            "title": "Job"
        },
        {
            "location": "/job/#job",
            "text": "Stability:  0 - subject to changes  Execution jobs are used to execute a research compendium. When a new execution job is started, the contents of the research compendium are cloned to create a trackable execution. The status information, logs and final working directory data are saved in their final state, so that they can be reviewed later on.  All execution jobs are tied to a single research compendium and reflect the execution history of that research compendium.  A trivial execution job would be a completely unmodified research compendium, to test the reproducibility of a research compendium.  (A  potential  future feature would be that the input data (input files, datasets, parameters) can be altered to run a modified execution job. This functionality is not yet implemented.)",
            "title": "Job"
        },
        {
            "location": "/job/#steps",
            "text": "One job consists of a series of steps. All of these steps can be in one of three status:  running ,  failure , or  success . The are executed in order.   validate_bag \n  Validate the BagIt bag based on npm's  bagit .  validate_compendium \n  Parses and validate the bagtainer configuration and metadta.  image_prepare \n  Create an archive of the payload of the BagIt bag, which allows to build and run the image also on remote Docker hosts.  image_build \n  Send the bag's payload as a tarballed archive to Docker to build an image, which is tagged  bagtainer:<jobid> .  image_execute \n  Run the container and return based on status code of program that ran inside the container.  cleanup \n  Remove image or job files (depending on server-side settings).",
            "title": "Steps"
        },
        {
            "location": "/job/#new-job",
            "text": "Create and run a new execution job. Requires a  compendium_id .  curl -F compendium_id=$ID https://\u2026/api/v1/job  POST /api/v1/job  200 OK\n\n{\"job_id\":\"ngK4m\"}",
            "title": "New job"
        },
        {
            "location": "/job/#body-parameters",
            "text": "compendium_id  - The  id  of the compendium to base this job on.  steps  -  TODO  select steps that will be executed (skip some steps in successive executions?)  inputs  -  proposal  - Array with one or more  FileDescriptor .",
            "title": "Body parameters"
        },
        {
            "location": "/job/#error-responses",
            "text": "404 Not Found\n\n{\"error\":\"no compendium with this ID found\"}  500 Internal Server Error\n\n{\"error\":\"could not create job\"}",
            "title": "Error responses"
        },
        {
            "location": "/job/#list-jobs",
            "text": "Stability:  0 - subject to changes  Lists jobs. Will return up to 100 results by default.  For pagination purposes, URLs for previous and next results are provided if applicable. Results will be sorted by descending date of last change. Results can be filtered by one or more compendiums, i.e. parameter  compendium_id , as well as by  state .\nThe content of the response can be limited to certain properties of each result by providing a list of fields, i.e. the parameter  fields .  curl -F compendium_id=$ID https://\u2026/api/v1/job?limit=100&start=2&compendium_id=$ID&state=success  GET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&state=success  200 OK\n\n{\n  \"results\":[\n    \"nkm4L\",\n    \"asdi5\",\n    \"nb2sg\",\n    \u2026\n  ],\n  \"next\":\"/api/v1/job?limit=100&start=3\",\n  \"previous\":\"/api/v1/job?limit=100&start=1\"\n}  GET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&state=success&fields=state  200 OK\n\n{\n  \"results\":[\n    {\n      \"id\":\"nkm4L\",\n      \"state\":\"failure\"\n    },\n    {\n      \"id\":\"asdi5\",\n      \"state\":\"success\"\n    },\n    {\n      \"id\":\"nb2sg\",\n      \"state\":\"running\"\n    },\n    \u2026\n  ],\n  \"next\":\"/api/v1/job?limit=100&start=3&fields=state\",\n  \"previous\":\"/api/v1/job?limit=100&start=1&fields=state\"\n}",
            "title": "List jobs"
        },
        {
            "location": "/job/#get-parameters",
            "text": "compendium_id  - Comma-separated list of related compendium ids to filter by.  start  - List from specific search result onwards. 1-indexed. Defaults to 1.  limit  - Specify maximum amount of results per page. Defaults to 100.  state  - Specify state to filter by. Can contain following states:  success ,  failure ,  running .  fields  - Specify if/which additional attributes results should contain. Allowed values are  state . Defaults to none (   ).",
            "title": "GET parameters"
        },
        {
            "location": "/job/#state",
            "text": "Shows the overall state of a job.  The status will be one of following:   success  - if state of all steps is  success .  failure  - if state of at least one step is  failure .  running  - if state of at least one step is  running  and no state is  failure .   More information about  steps  can be found in subsection  Steps  of section  View single job .",
            "title": "State"
        },
        {
            "location": "/job/#view-single-job",
            "text": "Stability:  0 - subject to changes  View details for a single job. Filelisting format is described in  Files  curl https://\u2026/api/v1/job/$ID  GET /api/v1/job/:id  200 OK\n\n{\n  \"id\":\"nkm4L\",\n  \"compendium_id\":\"a4Dnm\",\n  \"creation_date\": Date,\n  \"state\": \"fail\",\n  \"steps\":{\n    \"unpack\":{\n      \"status\":\"failure\",\n      \"start\": Date,\n      \"end\": Date,\n      \"text\":\"not a valid archive\"\n    },\n    \u2026\n  },\n  \"files\":{\n    {FileListing}\n  }\n}",
            "title": "View single job"
        },
        {
            "location": "/job/#url-parameters",
            "text": ":id  - id of the job to be viewed",
            "title": "URL parameters"
        },
        {
            "location": "/job/#steps_1",
            "text": "The answer will contain information to the following  steps :   validate_bag  validate_compendium  image_prepare  image_build  image_execute  cleanup   Their status will be one of:   queued  running  success  failure  warning  skip   Additional explanations to their state will be transmitted in the  text  property. The  start  and  end  timestamps indicate the start and end time of the step. They are formatted as ISO8601.",
            "title": "Steps"
        },
        {
            "location": "/job/#error-responses_1",
            "text": "404 Not Found\n\n{\"error\":\"no compendium with this ID found\"}",
            "title": "Error responses"
        },
        {
            "location": "/job/#job-status-updates",
            "text": "You can subscribe to real time status updates on jobs using  WebSockets . The implementation is based on  socket.io  and using their client is recommended.  The job log is available at  https://o2r.uni-muenster.de  under the namespace  api/v1/logs/job .  # create a socket.io client:\nvar socket = io('https://o2r.uni-muenster.de/api/v1/logs/job');  TODO : add documentation on messages on the socket.",
            "title": "Job status updates"
        },
        {
            "location": "/compendium/",
            "text": "Compendium\n\n\nList compendia\n\n\nStability:\n 0 - subject to changes\n\n\nWill return up to 100 results by default. For pagination purposes, URLs for previous and next results are provided if applicable.\n\n\ncurl https://\u2026/api/v1/compendium?limit=100&start=2\n\n\nGET /api/v1/compendium?limit=100&start=2\n\n\n200 OK\n\n{\n  \"results\":[\n    \"nkm4b\",\n    \"asdis\",\n    \"nb2sm\",\n    \u2026\n  ],\n  \"next\":\"/api/v1/compendium?limit=100&start=3\",\n  \"previous\":\"/api/v1/compendium?limit=100&start=1\"\n}\n\n\n\n\nYou can also get only the compendia uploaded by a specific user. A user filter can be combined with pagination.\n\n\ncurl http://\u2026/api/v1/compendium?user=0000-0001-6021-1617\n\n\nGET /api/v1/compendium?user=0000-0001-6021-1617\n\n\n200 OK\n\n{\n  \"results\":[\n    \"nkm4b\",\n    \"nb2sm\"\n  ]\n}\n\n\n\n\nURL parameters\n\n\n\n\njob_id\n - Comma-separated list of related job ids to filter by.\n\n\nuser\n - Public user identifier to filter by.\n\n\nstart\n - List from specific search result onwards. 1-indexed. Defaults to 1.\n\n\nlimit\n - Specify maximum amount of results per page. Defaults to 100.\n\n\n\n\nError responses\n\n\n404 Not Found\n\n{\"error\":\"no compendium found\"}\n\n\n\n\nView single compendium\n\n\nStability:\n 0 - subject to changes\n\n\nThis includes the complete metadata set, related job ids and a tree representation of the included \nfiles\n. The \ncreated\n timestamp refers to the upload of the compendium. It is formated as ISO8601.\n\n\ncurl https://\u2026/api/v1/$ID\n\n\nGET /api/v1/compendium/:id\n\n\n200 OK\n\n{\n  \"id\":\"comid\",\n  \"metadata\": \u2026 ,\n  \"created\": \"2016-08-01T13:57:40.760Z\",\n  \"files\": \u2026\n }\n\n\n\n\nURL parameters\n\n\n\n\n:id\n - the compendiums id\n\n\n\n\nError responses\n\n\n404 Not Found\n\n{\"error\":\"no compendium with this id\"}\n\n\n\n\nDownload compendium\n\n\nStability:\n 0 - subject to changes\n\n\nDownload the complete compendium as an archive. Supported formats are as follows:\n\n\n\n\nzip\n\n\ntar\n\n\ntar.gz\n (gzipped tarball)\n\n\n\n\nRequests\n\n\ncurl https://\u2026/api/v1/compendium/$ID.zip\n\n\nwget https://\u2026/api/v1/compendium/$ID.zip\n\n\nGET /api/v1/compendium/:id.zip\nGET /api/v1/compendium/:id.tar\nGET /api/v1/compendium/:id.tar.gz\nGET /api/v1/compendium/:id.tar?gzip\nGET /api/v1/compendium/:id.zip?image=false\n\n\n\n\nResponse\n\n\nThe response is a file attachment. The suggested file name is available in the HTTP header \ncontent-disposition\n using the respective file extension (i.e. \n.zip\n, \n.tar\n, and \n.tar.gz\n).\n\n\nThe \ncontent-type\n header also reflects the respective format, which can take the following values:\n\n\n\n\napplication/zip\n for ZIP archive\n\n\napplication/x-tar\n for TAR archive\n\n\napplication/octet-stream\n for gzipped TAR\n\n\n\n\n200 OK\nContent-Type: application/zip\nTransfer-Encoding: chunked\nContent-Disposition: attachment; filename=\"$ID.zip\"\nX-Response-Time: 13.556ms\n\n\n\n\nThe zip file contains a comment with the original URL.\n\n\n$ unzip -z CXE1c.zip\nArchive:  CXE1c.zip\nCreated by o2r [https://\u2026/api/v1/compendium/CXE1c.zip]\n\n\n\n\nURL parameters\n\n\n\n\n:id\n - the compendiums id\n\n\n\n\nURL query parameters\n\n\n\n\ngzip\n - \nonly for .tar endpoint\n - compress tarball with gzip\n\n\nimage=true\n or \nimage=false\n - include tarball of Docker image in the archive, default is \ntrue\n\n\n\n\nError responses\n\n\n404 Not Found\n\n{\"error\":\"no compendium with this id\"}\n\n\n\n\nList related execution jobs\n\n\ncurl https://\u2026/api/v1/compendium/$ID/jobs\n\n\nGET /api/v1/compendium/:id/jobs\n\n\n200 OK\n{\n  \"results\":[\n    \"nkm4L\",\n    \"asdi5\",\n    \"nb2sg\",\n    \u2026\n  ],\n  \"next\":\"/api/v1/compendium/:id/jobs?limit=100&start=3\",\n  \"previous\":\"/api/v1/compendium/:id/job?limit=100&start=1\"\n}\n\n\n\n\nImplemented:\n Yes\n\n\nStability:\n 0 - subject to changes\n\n\nURL parameters\n\n\n\n\n:id\n - compendium id that the results should be related to\n\n\n\n\nError response\n\n\n404 Not Found\n\n{\"error\":\"no job found\"}",
            "title": "Compendium"
        },
        {
            "location": "/compendium/#compendium",
            "text": "",
            "title": "Compendium"
        },
        {
            "location": "/compendium/#list-compendia",
            "text": "Stability:  0 - subject to changes  Will return up to 100 results by default. For pagination purposes, URLs for previous and next results are provided if applicable.  curl https://\u2026/api/v1/compendium?limit=100&start=2  GET /api/v1/compendium?limit=100&start=2  200 OK\n\n{\n  \"results\":[\n    \"nkm4b\",\n    \"asdis\",\n    \"nb2sm\",\n    \u2026\n  ],\n  \"next\":\"/api/v1/compendium?limit=100&start=3\",\n  \"previous\":\"/api/v1/compendium?limit=100&start=1\"\n}  You can also get only the compendia uploaded by a specific user. A user filter can be combined with pagination.  curl http://\u2026/api/v1/compendium?user=0000-0001-6021-1617  GET /api/v1/compendium?user=0000-0001-6021-1617  200 OK\n\n{\n  \"results\":[\n    \"nkm4b\",\n    \"nb2sm\"\n  ]\n}",
            "title": "List compendia"
        },
        {
            "location": "/compendium/#url-parameters",
            "text": "job_id  - Comma-separated list of related job ids to filter by.  user  - Public user identifier to filter by.  start  - List from specific search result onwards. 1-indexed. Defaults to 1.  limit  - Specify maximum amount of results per page. Defaults to 100.",
            "title": "URL parameters"
        },
        {
            "location": "/compendium/#error-responses",
            "text": "404 Not Found\n\n{\"error\":\"no compendium found\"}",
            "title": "Error responses"
        },
        {
            "location": "/compendium/#view-single-compendium",
            "text": "Stability:  0 - subject to changes  This includes the complete metadata set, related job ids and a tree representation of the included  files . The  created  timestamp refers to the upload of the compendium. It is formated as ISO8601.  curl https://\u2026/api/v1/$ID  GET /api/v1/compendium/:id  200 OK\n\n{\n  \"id\":\"comid\",\n  \"metadata\": \u2026 ,\n  \"created\": \"2016-08-01T13:57:40.760Z\",\n  \"files\": \u2026\n }",
            "title": "View single compendium"
        },
        {
            "location": "/compendium/#url-parameters_1",
            "text": ":id  - the compendiums id",
            "title": "URL parameters"
        },
        {
            "location": "/compendium/#error-responses_1",
            "text": "404 Not Found\n\n{\"error\":\"no compendium with this id\"}",
            "title": "Error responses"
        },
        {
            "location": "/compendium/#download-compendium",
            "text": "Stability:  0 - subject to changes  Download the complete compendium as an archive. Supported formats are as follows:   zip  tar  tar.gz  (gzipped tarball)",
            "title": "Download compendium"
        },
        {
            "location": "/compendium/#requests",
            "text": "curl https://\u2026/api/v1/compendium/$ID.zip  wget https://\u2026/api/v1/compendium/$ID.zip  GET /api/v1/compendium/:id.zip\nGET /api/v1/compendium/:id.tar\nGET /api/v1/compendium/:id.tar.gz\nGET /api/v1/compendium/:id.tar?gzip\nGET /api/v1/compendium/:id.zip?image=false",
            "title": "Requests"
        },
        {
            "location": "/compendium/#response",
            "text": "The response is a file attachment. The suggested file name is available in the HTTP header  content-disposition  using the respective file extension (i.e.  .zip ,  .tar , and  .tar.gz ).  The  content-type  header also reflects the respective format, which can take the following values:   application/zip  for ZIP archive  application/x-tar  for TAR archive  application/octet-stream  for gzipped TAR   200 OK\nContent-Type: application/zip\nTransfer-Encoding: chunked\nContent-Disposition: attachment; filename=\"$ID.zip\"\nX-Response-Time: 13.556ms  The zip file contains a comment with the original URL.  $ unzip -z CXE1c.zip\nArchive:  CXE1c.zip\nCreated by o2r [https://\u2026/api/v1/compendium/CXE1c.zip]",
            "title": "Response"
        },
        {
            "location": "/compendium/#url-parameters_2",
            "text": ":id  - the compendiums id",
            "title": "URL parameters"
        },
        {
            "location": "/compendium/#url-query-parameters",
            "text": "gzip  -  only for .tar endpoint  - compress tarball with gzip  image=true  or  image=false  - include tarball of Docker image in the archive, default is  true",
            "title": "URL query parameters"
        },
        {
            "location": "/compendium/#error-responses_2",
            "text": "404 Not Found\n\n{\"error\":\"no compendium with this id\"}",
            "title": "Error responses"
        },
        {
            "location": "/compendium/#list-related-execution-jobs",
            "text": "curl https://\u2026/api/v1/compendium/$ID/jobs  GET /api/v1/compendium/:id/jobs  200 OK\n{\n  \"results\":[\n    \"nkm4L\",\n    \"asdi5\",\n    \"nb2sg\",\n    \u2026\n  ],\n  \"next\":\"/api/v1/compendium/:id/jobs?limit=100&start=3\",\n  \"previous\":\"/api/v1/compendium/:id/job?limit=100&start=1\"\n}  Implemented:  Yes  Stability:  0 - subject to changes",
            "title": "List related execution jobs"
        },
        {
            "location": "/compendium/#url-parameters_3",
            "text": ":id  - compendium id that the results should be related to",
            "title": "URL parameters"
        },
        {
            "location": "/compendium/#error-response",
            "text": "404 Not Found\n\n{\"error\":\"no job found\"}",
            "title": "Error response"
        },
        {
            "location": "/files/",
            "text": "File Listing\n\n\nThe file listing is returned in the single view of a job or compendium. It includes the complete content of the bagtainer in its current state. If a job has been run and the programm outputs new data, this new data will be included as well.\n\n\nNote: currently, the bagtainer will be invalid if new data is saved, as the checksums are not updated.\n\n\nFile listings are represented as a Object. The file structure for a synthetic job \nnj141\n is as follows.\n\n\nnj141\n\u251c\u2500\u2500 bagit.txt\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 paper.Rmd\n    \u2514\u2500\u2500 Dockerfile\n\n\n\n\nwill be represented as\n\n\n{\n  \"path\": \"/api/v1/job/nj141/data\",\n  \"name\": \"nj141\",\n  \"children\": [\n    {\n      \"path\": \"/api/v1/job/nj141/data/bagit.txt\",\n      \"name\": \"bagit.xt\",\n      \"type\": \"text/plain\",\n      \"size\": 55\n    },\n    {\n      \"path\": \"/api/v1/job/nj141/data/data\",\n      \"name\": \"data\",\n      \"children\": [\n        {\n          \"path\": \"/api/v1/job/nj141/data/data/paper.Rmd\",\n          \"name\": \"paper.Rmd\",\n          \"type\": \"text/plain\",\n          \"size\": 346512\n        }\n        {\n          \"path\": \"/api/v1/job/nj141/data/data/Dockerfile\",\n          \"name\": \"Dockerfile\",\n          \"type\": \"text/plain\",\n          \"size\": 1729\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\npath\n property\n\n\nThe \npath\n property for each file in the listing is a link to the raw file. Additionally the \nGET\n parameter \n?size=\u2026\n can be appended to retrieve previews of the files. In the case of Images (\npng\n, \njpg\n, \ngif\n, \ntiff\n), the value defines the maximum width/height. For text files (\ntxt\n, \ncsv\n, scripts), the value defines the amount of lines returned.\n\n\ntype\n property\n\n\nThe \ntype\n property is a best guess for the MIME type of the file content. It is a result of the files extension. Look at the \nlist of extension to type mapping\n for specific details.",
            "title": "Files"
        },
        {
            "location": "/files/#file-listing",
            "text": "The file listing is returned in the single view of a job or compendium. It includes the complete content of the bagtainer in its current state. If a job has been run and the programm outputs new data, this new data will be included as well.  Note: currently, the bagtainer will be invalid if new data is saved, as the checksums are not updated.  File listings are represented as a Object. The file structure for a synthetic job  nj141  is as follows.  nj141\n\u251c\u2500\u2500 bagit.txt\n\u2514\u2500\u2500 data\n    \u251c\u2500\u2500 paper.Rmd\n    \u2514\u2500\u2500 Dockerfile  will be represented as  {\n  \"path\": \"/api/v1/job/nj141/data\",\n  \"name\": \"nj141\",\n  \"children\": [\n    {\n      \"path\": \"/api/v1/job/nj141/data/bagit.txt\",\n      \"name\": \"bagit.xt\",\n      \"type\": \"text/plain\",\n      \"size\": 55\n    },\n    {\n      \"path\": \"/api/v1/job/nj141/data/data\",\n      \"name\": \"data\",\n      \"children\": [\n        {\n          \"path\": \"/api/v1/job/nj141/data/data/paper.Rmd\",\n          \"name\": \"paper.Rmd\",\n          \"type\": \"text/plain\",\n          \"size\": 346512\n        }\n        {\n          \"path\": \"/api/v1/job/nj141/data/data/Dockerfile\",\n          \"name\": \"Dockerfile\",\n          \"type\": \"text/plain\",\n          \"size\": 1729\n        }\n      ]\n    }\n  ]\n}",
            "title": "File Listing"
        },
        {
            "location": "/files/#path-property",
            "text": "The  path  property for each file in the listing is a link to the raw file. Additionally the  GET  parameter  ?size=\u2026  can be appended to retrieve previews of the files. In the case of Images ( png ,  jpg ,  gif ,  tiff ), the value defines the maximum width/height. For text files ( txt ,  csv , scripts), the value defines the amount of lines returned.",
            "title": "path property"
        },
        {
            "location": "/files/#type-property",
            "text": "The  type  property is a best guess for the MIME type of the file content. It is a result of the files extension. Look at the  list of extension to type mapping  for specific details.",
            "title": "type property"
        },
        {
            "location": "/files-mime/",
            "text": "File extension to MIME type mappings\n\n\nThis list contains the mapping of file extensions to MIME types to be expected in a compendium listing.\n\n\n\n\n\n\n\n\nExtension\n\n\nMIME type\n\n\n\n\n\n\n\n\n\n\n.txt\n\n\ntext/plain\n\n\n\n\n\n\n.jpg\n\n\nimage/jpeg",
            "title": "Mime-types"
        },
        {
            "location": "/files-mime/#file-extension-to-mime-type-mappings",
            "text": "This list contains the mapping of file extensions to MIME types to be expected in a compendium listing.     Extension  MIME type      .txt  text/plain    .jpg  image/jpeg",
            "title": "File extension to MIME type mappings"
        },
        {
            "location": "/user/",
            "text": "User\n\n\nList users\n\n\nStability:\n 1 - unlikely to change\n\n\nReturn a list of user ids. \nPagination (including defaults) as described for compendia\n is available for users.\n\n\ncurl https://\u2026/api/v1/user\n\n\nGET /api/v1/user\n\n\n200 OK\n\n{\n    \"results\": [\n        \"0000-0002-0024-5046\",\n        \"0000-0001-6021-1617\"\n    ]\n}\n\n\n\n\nView single user\n\n\nStability:\n 0 - subject to changes\n\n\nShow the details of a user.\n\n\ncurl https://\u2026/api/v1/user/$ID\n\n\nGET /api/v1/user/:id\n\n\n200 OK\n\n{\n    \"id\": \"0000-0001-6021-1617\",\n    \"name\": \"o2r\"\n}\n\n\n\n\nThe content of the response depends on the state and level of the user that requests the resource. The above response only contains the id and the publicly visible name. The following response contains more details and requires a certain user level of the authenticated user making the request:\n\n\ncurl --cookie \"connect.sid=<session cookie here>\" https://\u2026/api/v1/user/0000-0001-6021-1617\n\n\n200 OK\n\n{\n    \"id\": \"0000-0001-6021-1617\",\n    \"name\": \"o2r\",\n    \"level\": 0,\n    \"lastseen\": \"2016-08-15T12:32:23.972Z\"\n}\n\n\n\n\nURL parameters\n\n\n\n\n:id\n - the user id\n\n\n\n\nError responses\n\n\n404 Not Found\n\n{\"error\":\"no user with this id\"}\n\n\n\n\nAuthentication\n\n\nUser authentication is done via authenticated sessions, which are referenced with a cookie called \nconnect.sid\n. For every endpoint that needs user authentication, a cookie with an authenticated session is required.\n\n\nAccess authentication information for direct API access\n\n\nTo run commands which require authentication from the command line, a user must login on the website first. Then open you browser cookies and find a cookie issued by \no2r.uni-muenster.de\n with the name \nconnect.sid\n. Use the the contents of the cookie for your requests, for example as shown below when using curl.\n\n\ncurl [...] --cookie \"connect.sid=<code string here>\" \\\n     http://\u2026/api/v1/endpoint\n\n\n\n\nAuthentication within microservices\n\n\nAttention:\n The authentication process \nrequires\n a secured connection, i.e. HTTPS.\n\n\nAuthentication provider\n\n\nSession authentication is done using the OAuth 2.0 protocol. Currently \nORCID\n is the only available authentication provider, therefore users need to be registered with ORCID. Because of its nature, the authentication workflow is not a RESTful service. Users will need to navigate to the login endpoint with their webbrowser and grant access to the o2r platform for their ORCID account. They will then be sent back to our authentication service, which verifies the authentification request and enriches the user session with the verified ORCID for this user.\n\n\nStart OAuth login\n\n\nStability:\n 1 - The endpoint location and error response might change.\n\n\nNavigate the webbrowser (e.g. via a HTML \n<a>\n link) to \n/api/v1/auth/login\n, which will then redirect the user and request access to your ORCID profile. After granting access, ORCID will redirect the user back to the \n/api/v1/auth/login\n endpoint with a unique \ncode\n param that is used to verify the request.\n\n\nIf the verification was successful, the endpoint returns a session cookie named \nconnect.sid\n, which is tied to a authenticated session. The server answers with a \n301 redirect\n, which redirects the user back to \n/\n, where the o2r platform webinterface resides.\n\n\nIf the login is unsuccessful, the user is not redirected back to the site and no further redirects are configured.\n\n\nRequest authentication status\n\n\nAs the cookie is present in both authenticated and unauthenticated sessions, clients (e.g. webbrowsers) will need to know if their session is authenticated, and if so, as which ORCID user. For this, send a \nGET\n request to the \n/api/v1/auth/whoami\n endpoint, including your session cookie.\n\n\nImplemented:\n Yes\n\n\nStability:\n 2 - will not likely change.\n\n\ncurl https://\u2026/api/v1/auth/whoami --cookie \"connect.sid=\u2026\n\n\nGET /api/v1/auth/whoami\n\n\n200 OK\n\n{\n  \"orcid\": \"0000-0001-6021-1617\",\n  \"name\": \"o2r\"\n}\n\n\n\n\nError response\n\n\nWhen no session cookie was included, or the included session cookie does not belong to a authenticated session, the service will respond with a \n401 Unauthorized\n message.\n\n\n401 Unauthorized\n\n{\n  \"error\": \"not authenticated\"\n}\n\n\n\n\nEdit user\n\n\nYou can update information of an existing user using the \nHTTP\n operation \nPATCH\n.\n\n\nChange level\n\n\nThe request must be made by an authenticated user with an appropriate level. The new level is passed to the API via a query parameter, i.e. \n..?level=<new level value>\n.\nThe value must be an \nint\n.\nThe response is the full user document with the updated value.\n\n\ncurl --request PATCH --cookie \"connect.sid=<session cookie here>\" \\\n  https://\u2026/api/v1/user/0000-0001-6021-1617?level=42`\n\n\n\n\n200 OK\n\n{\n    \"id\": \"0000-0001-6021-1617\",\n    \"name\": \"o2r\",\n    \"level\": 42,\n    \"lastseen\": \"2016-08-15T12:32:23.972Z\"\n}\n\n\n\n\nError responses\n\n\n401 Unauthorized\n\n{\n  \"error\": \"user is not authenticated\"\n}\n\n\n\n\n401 Unauthorized\n\n{\n  \"error\": \"user level does not allow edit\"\n}\n\n\n\n\n400 Bad Request\n\n{\n  \"error\": \"parameter 'level' could not be parsed as an integer\"\n}",
            "title": "User"
        },
        {
            "location": "/user/#user",
            "text": "",
            "title": "User"
        },
        {
            "location": "/user/#list-users",
            "text": "Stability:  1 - unlikely to change  Return a list of user ids.  Pagination (including defaults) as described for compendia  is available for users.  curl https://\u2026/api/v1/user  GET /api/v1/user  200 OK\n\n{\n    \"results\": [\n        \"0000-0002-0024-5046\",\n        \"0000-0001-6021-1617\"\n    ]\n}",
            "title": "List users"
        },
        {
            "location": "/user/#view-single-user",
            "text": "Stability:  0 - subject to changes  Show the details of a user.  curl https://\u2026/api/v1/user/$ID  GET /api/v1/user/:id  200 OK\n\n{\n    \"id\": \"0000-0001-6021-1617\",\n    \"name\": \"o2r\"\n}  The content of the response depends on the state and level of the user that requests the resource. The above response only contains the id and the publicly visible name. The following response contains more details and requires a certain user level of the authenticated user making the request:  curl --cookie \"connect.sid=<session cookie here>\" https://\u2026/api/v1/user/0000-0001-6021-1617  200 OK\n\n{\n    \"id\": \"0000-0001-6021-1617\",\n    \"name\": \"o2r\",\n    \"level\": 0,\n    \"lastseen\": \"2016-08-15T12:32:23.972Z\"\n}",
            "title": "View single user"
        },
        {
            "location": "/user/#url-parameters",
            "text": ":id  - the user id",
            "title": "URL parameters"
        },
        {
            "location": "/user/#error-responses",
            "text": "404 Not Found\n\n{\"error\":\"no user with this id\"}",
            "title": "Error responses"
        },
        {
            "location": "/user/#authentication",
            "text": "User authentication is done via authenticated sessions, which are referenced with a cookie called  connect.sid . For every endpoint that needs user authentication, a cookie with an authenticated session is required.",
            "title": "Authentication"
        },
        {
            "location": "/user/#access-authentication-information-for-direct-api-access",
            "text": "To run commands which require authentication from the command line, a user must login on the website first. Then open you browser cookies and find a cookie issued by  o2r.uni-muenster.de  with the name  connect.sid . Use the the contents of the cookie for your requests, for example as shown below when using curl.  curl [...] --cookie \"connect.sid=<code string here>\" \\\n     http://\u2026/api/v1/endpoint",
            "title": "Access authentication information for direct API access"
        },
        {
            "location": "/user/#authentication-within-microservices",
            "text": "Attention:  The authentication process  requires  a secured connection, i.e. HTTPS.",
            "title": "Authentication within microservices"
        },
        {
            "location": "/user/#authentication-provider",
            "text": "Session authentication is done using the OAuth 2.0 protocol. Currently  ORCID  is the only available authentication provider, therefore users need to be registered with ORCID. Because of its nature, the authentication workflow is not a RESTful service. Users will need to navigate to the login endpoint with their webbrowser and grant access to the o2r platform for their ORCID account. They will then be sent back to our authentication service, which verifies the authentification request and enriches the user session with the verified ORCID for this user.",
            "title": "Authentication provider"
        },
        {
            "location": "/user/#start-oauth-login",
            "text": "Stability:  1 - The endpoint location and error response might change.  Navigate the webbrowser (e.g. via a HTML  <a>  link) to  /api/v1/auth/login , which will then redirect the user and request access to your ORCID profile. After granting access, ORCID will redirect the user back to the  /api/v1/auth/login  endpoint with a unique  code  param that is used to verify the request.  If the verification was successful, the endpoint returns a session cookie named  connect.sid , which is tied to a authenticated session. The server answers with a  301 redirect , which redirects the user back to  / , where the o2r platform webinterface resides.  If the login is unsuccessful, the user is not redirected back to the site and no further redirects are configured.",
            "title": "Start OAuth login"
        },
        {
            "location": "/user/#request-authentication-status",
            "text": "As the cookie is present in both authenticated and unauthenticated sessions, clients (e.g. webbrowsers) will need to know if their session is authenticated, and if so, as which ORCID user. For this, send a  GET  request to the  /api/v1/auth/whoami  endpoint, including your session cookie.  Implemented:  Yes  Stability:  2 - will not likely change.  curl https://\u2026/api/v1/auth/whoami --cookie \"connect.sid=\u2026  GET /api/v1/auth/whoami  200 OK\n\n{\n  \"orcid\": \"0000-0001-6021-1617\",\n  \"name\": \"o2r\"\n}",
            "title": "Request authentication status"
        },
        {
            "location": "/user/#error-response",
            "text": "When no session cookie was included, or the included session cookie does not belong to a authenticated session, the service will respond with a  401 Unauthorized  message.  401 Unauthorized\n\n{\n  \"error\": \"not authenticated\"\n}",
            "title": "Error response"
        },
        {
            "location": "/user/#edit-user",
            "text": "You can update information of an existing user using the  HTTP  operation  PATCH .",
            "title": "Edit user"
        },
        {
            "location": "/user/#change-level",
            "text": "The request must be made by an authenticated user with an appropriate level. The new level is passed to the API via a query parameter, i.e.  ..?level=<new level value> .\nThe value must be an  int .\nThe response is the full user document with the updated value.  curl --request PATCH --cookie \"connect.sid=<session cookie here>\" \\\n  https://\u2026/api/v1/user/0000-0001-6021-1617?level=42`  200 OK\n\n{\n    \"id\": \"0000-0001-6021-1617\",\n    \"name\": \"o2r\",\n    \"level\": 42,\n    \"lastseen\": \"2016-08-15T12:32:23.972Z\"\n}",
            "title": "Change level"
        },
        {
            "location": "/user/#error-responses_1",
            "text": "401 Unauthorized\n\n{\n  \"error\": \"user is not authenticated\"\n}  401 Unauthorized\n\n{\n  \"error\": \"user level does not allow edit\"\n}  400 Bad Request\n\n{\n  \"error\": \"parameter 'level' could not be parsed as an integer\"\n}",
            "title": "Error responses"
        },
        {
            "location": "/search/",
            "text": "Search\n\n\nIndexed information\n\n\n\n\ncompendium metadata \nplanned\n\n\nPDF documents in a compendium \nplanned\n\n\ntext files in a compendium \nplanned\n\n\n\n\nSimple search\n\n\nThe search is based on \nElasticsearch\n and the regular \nElasticsearch search API\n is exposed at\n\n\nhttp://\u2026/api/v1/search\n\n\n\n\nExample requests\n\n\n\n\nhttp://o2r.uni-muenster.de/api/v1/search?q=*\n\n\nhttp://o2r.uni-muenster.de/api/v1/search?q=term\n\n\nhttp://o2r.uni-muenster.de/api/v1/search?q=*&fields=compendium_id\n\n\n\n\nSecurity\n\n\nOnly reading requsts, i.e. \nGET\n requests, are allowed at the moment. This means that Kibana cannot be run against this interface, and neither can complex queries requiring \nPOST\n requests. \nGET\n requests with payloads are allowed.\n\n\nExample query:\n\n\ncurl -XGET 'https://\u2026/api/v1/search' -d '{\n    \"query\": {\n            \"type\" : {\n                \"value\" : \"jobs\"\n            }\n        }\n    }\n}'\n\n\n\n\nSuggesters\n\n\nUNDER DEVELOPMENT\n\n\nElasticsearch suggest API",
            "title": "Search"
        },
        {
            "location": "/search/#search",
            "text": "",
            "title": "Search"
        },
        {
            "location": "/search/#indexed-information",
            "text": "compendium metadata  planned  PDF documents in a compendium  planned  text files in a compendium  planned",
            "title": "Indexed information"
        },
        {
            "location": "/search/#simple-search",
            "text": "The search is based on  Elasticsearch  and the regular  Elasticsearch search API  is exposed at  http://\u2026/api/v1/search",
            "title": "Simple search"
        },
        {
            "location": "/search/#example-requests",
            "text": "http://o2r.uni-muenster.de/api/v1/search?q=*  http://o2r.uni-muenster.de/api/v1/search?q=term  http://o2r.uni-muenster.de/api/v1/search?q=*&fields=compendium_id",
            "title": "Example requests"
        },
        {
            "location": "/search/#security",
            "text": "Only reading requsts, i.e.  GET  requests, are allowed at the moment. This means that Kibana cannot be run against this interface, and neither can complex queries requiring  POST  requests.  GET  requests with payloads are allowed.  Example query:  curl -XGET 'https://\u2026/api/v1/search' -d '{\n    \"query\": {\n            \"type\" : {\n                \"value\" : \"jobs\"\n            }\n        }\n    }\n}'",
            "title": "Security"
        },
        {
            "location": "/search/#suggesters",
            "text": "UNDER DEVELOPMENT  Elasticsearch suggest API",
            "title": "Suggesters"
        },
        {
            "location": "/shipment/",
            "text": "Shipment\n\n\nShipments are used to deliver ERCs to third party repositories or archives.\n\n\nList shipments\n\n\nWill return the complete list of shipments, currently without pagination.\n\n\ncurl https://\u2026/api/v1/shipment\n\n\nGET /api/v1/shipment\n\n\n200\n\n{\n    \"shipments\": [\"dc351fc6-314f-4947-a235-734ab5971eff\", \"...\"]\n}\n\n\n\n\nYou can also get only the shipments belonging to a specific id or compendium id.\n\n\ncurl http://\u2026/api/v1/shipment?compendium_id=4XgD9\n\n\nGET /api/v1/shipment?compendium_id=4XgD97\n\n\n200 \n\n{\n    \"last_modified\": \"2016-12-12 10:34:32.001475\",\n    \"recipient\": \"zenodo\",\n    \"id\": \"dc351fc6-314f-4947-a235-734ab5971eff\",\n    \"deposition_id\": \"63179\",\n    \"user\": \"0000-0001-6021-1617\",\n    \"status\": \"delivered\",\n    \"compendium_id\": \"4XgD9\",\n    \"deposition_url\": \"https://sandbox.zenodo.org/record/63179\"\n}\n\n\n\n\nNote that returned deposition urls from Zenodo (records) will only be active after publishing.\n\n\nURL parameters\n\n\n\n\nid\n - The identifier of a specific shipment.\n\n\ncompendium_id\n - The identifier of a specific compendium.\n\n\n\n\nError responses\n\n\n400\n\n{\"error\":\"bad request\"}\n\n\n\n\nNew shipment\n\n\nYou can start a transmission to a repository at the same endpoint using a \nPOST\n request.\n\n\ncurl https://\u2026/api/v1/shipment\n\n\nPOST /api/v1/shipment\n\n\n200\n\n{\n    \"recipient\": \"zenodo\",\n    \"id\": \"dc351fc6-314f-4947-a235-734ab5971eff\"\n}\n\n\n\n\nBody parameters\n\n\nThis requires the following parameters and conditions:\n\n\n\n\ncompendium_id\n\n\nrecipient\n (name of the repository; \ncurrently only \n\"zenodo\"\n is possible\n)\n\n\ncookie\n user must be logged in with sufficient rights\n\n\n\n\nOptionally, you can specifiy a custom \nshipment_id\n.\n\n\nError responses\n\n\n400\n\n{\"error\":\"bad request\"}\n\n\n\n\n403\n\n{\"error\": \"insufficient permissions\"}\n\n\n\n\nImplemented:\n Yes\n\n\nStability:\n 0 - subject to changes",
            "title": "Shipment"
        },
        {
            "location": "/shipment/#shipment",
            "text": "Shipments are used to deliver ERCs to third party repositories or archives.",
            "title": "Shipment"
        },
        {
            "location": "/shipment/#list-shipments",
            "text": "Will return the complete list of shipments, currently without pagination.  curl https://\u2026/api/v1/shipment  GET /api/v1/shipment  200\n\n{\n    \"shipments\": [\"dc351fc6-314f-4947-a235-734ab5971eff\", \"...\"]\n}  You can also get only the shipments belonging to a specific id or compendium id.  curl http://\u2026/api/v1/shipment?compendium_id=4XgD9  GET /api/v1/shipment?compendium_id=4XgD97  200 \n\n{\n    \"last_modified\": \"2016-12-12 10:34:32.001475\",\n    \"recipient\": \"zenodo\",\n    \"id\": \"dc351fc6-314f-4947-a235-734ab5971eff\",\n    \"deposition_id\": \"63179\",\n    \"user\": \"0000-0001-6021-1617\",\n    \"status\": \"delivered\",\n    \"compendium_id\": \"4XgD9\",\n    \"deposition_url\": \"https://sandbox.zenodo.org/record/63179\"\n}  Note that returned deposition urls from Zenodo (records) will only be active after publishing.",
            "title": "List shipments"
        },
        {
            "location": "/shipment/#url-parameters",
            "text": "id  - The identifier of a specific shipment.  compendium_id  - The identifier of a specific compendium.",
            "title": "URL parameters"
        },
        {
            "location": "/shipment/#error-responses",
            "text": "400\n\n{\"error\":\"bad request\"}",
            "title": "Error responses"
        },
        {
            "location": "/shipment/#new-shipment",
            "text": "You can start a transmission to a repository at the same endpoint using a  POST  request.  curl https://\u2026/api/v1/shipment  POST /api/v1/shipment  200\n\n{\n    \"recipient\": \"zenodo\",\n    \"id\": \"dc351fc6-314f-4947-a235-734ab5971eff\"\n}",
            "title": "New shipment"
        },
        {
            "location": "/shipment/#body-parameters",
            "text": "This requires the following parameters and conditions:   compendium_id  recipient  (name of the repository;  currently only  \"zenodo\"  is possible )  cookie  user must be logged in with sufficient rights   Optionally, you can specifiy a custom  shipment_id .",
            "title": "Body parameters"
        },
        {
            "location": "/shipment/#error-responses_1",
            "text": "400\n\n{\"error\":\"bad request\"}  403\n\n{\"error\": \"insufficient permissions\"}  Implemented:  Yes  Stability:  0 - subject to changes",
            "title": "Error responses"
        }
    ]
}