openapi: 3.0.3
info:
  title: o2r web api
  description: |
    ## About

    The o2r web API acts as the interface between the o2r microservices and the web interface.

    The API provides services around the executable research compendium (ERC), or "compendium" for short, which is documented in the ERC spec.

    A good starting point for understanding the different parts of the API is the compendium life-cycle.

    ---
    ## Citation

    To cite this specification please use

    >_Nüst, Daniel, 2018. Reproducibility Service for Executable Research Compendia: Technical Specifications and Reference Implementation. Zenodo. doi:10.5281/zenodo.2203844_

    For a complete list of publications, posters, presentations, and software projects from th2 o2r project please visit https://o2r.info/results/.

    ---
    ## General

    The API is implemented as a RESTful API. The entrypoint for the current version is /api/v1.

    Unless specified otherwise, responses are always in JSON format. Body parameters in `POST` requests are expected in `multipart/form-data format.` Requests to the API should always be made with a secure connection using  `HTTPS`. Some requests require authentication with a specific user level.

    ---
    ## License

    ![Public Domain Button](https://licensebuttons.net/p/zero/1.0/88x31.png)

    The o2r Executable Research Compendium specification is licensed under Creative Commons CC0 1.0 Universal License, see file LICENSE. To the extent possible under law, the people who associated CC0 with this work have waived all copyright and related or neighboring rights to this work. This work is published from: Germany.

  termsOfService: ''
  contact: {}
  license:
    name: Creative Commons CC0 1.0 Universal License
    url: 'https://creativecommons.org/publicdomain/zero/1.0/'
  version: '1.0'
  x-logo:
   url: 'https://o2r.info/api/logo.png'
servers:
  - url: 'https://o2r.uni-muenster.de/api/v1'
    description: The standard server for the o2r api
paths:
  #Compendium paths
  /compendium:
    post:
      tags:
        - Compendium
      summary: Upload via API
      description: |
        Upload a research workspace or full compendium as a compressed `.zip` archive with an HTTP `POST` request using `multipart/form-data`.

        The upload is only allowed for logged in users. Upon successful extraction of archive and processing of the contents, the `id` for the new compendium is returned.

        <!--HTML is necessary, due to being essential for the notes-->
        <div class="note blue_note">
          <p><b>&#x26A0; Required user level and authentication</b></p>
          <p>The user creating a new compendium must have the required user level. Requests must be authenticated with a cookie <code>connect.sid</code>, see user authentication.</p>
        </div>


        ```
        curl -F "compendium=@compendium.zip;type=application/zip" \
            -F content_type=compendium \
            --cookie "connect.sid=<cookie string here>" \
            https://…/api/v1/compendium
        ```

        ```
        curl -F "compendium=@path/to/workspace.zip;type=application/zip" \
            -F content_type=workspace \
            --cookie "connect.sid=<cookie string here>" \
          https://…/api/v1/compendium
        ```
        <div class="note yellow_note">
          <p><b>&#x26A0; Important</b></p>
          <p>After successful upload the candidate process must be completed for workspaces.</p>
        </div>

        For local testing you can quickly upload some of the example compendia and workspaces from the erc-examples project.

      operationId: upload_compendium
      security:
      - cookie_authenification: []
      requestBody:
        description: |
          The Compendium to be uploaded.

        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_compendium'
      responses:
        200:
          description: upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_response'
              examples:
                upload_success:
                  $ref: '#/components/examples/upload_success'
        400:
          description: Bad Request due to not supported content_type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                bad_request_content_type:
                  $ref: '#/components/examples/bad_request_content_type'
        401:
          description: Unauthorized due to user not being logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/unauthorized'
        403:
          description: Forbidden due to user level not allowing upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/upload_forbidden'
        422:
          description: Unprocessable Entity
    get:
      tags:
      - Compendium
      summary: List compendium
      description: Returns up to 100 results by default.
      operationId: list_compendium
      parameters:
        - $ref: '#/components/parameters/job_id_query'
        - $ref: '#/components/parameters/user_query'
        - $ref: '#/components/parameters/doi_query'
        - $ref: '#/components/parameters/start_query'
        - $ref: '#/components/parameters/limit_query'
      responses:
        200:
          description: A json Array with the matching results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
              examples:
                list_success:
                  $ref: '#/components/examples/list_success'
                list_fail:
                  $ref: '#/components/examples/list_fail'

  /compendium/{compendium_id}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
      - Compendium
      summary: View a single compendium and metadata
      description: |
        This includes the complete metadata set, related job ids and a tree representation of the included files. The created timestamp refers to the upload of the compendium. It is formated as ISO8601.

        `curl https://…/api/v1/$ID`

      operationId: view_compendium
      responses:
        200:
          description: Returns the matching Compendium.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view_response'
              examples:
                view_success:
                  $ref: '#/components/examples/view_success'
                view_metadata:
                  $ref: '#/components/examples/view_metadata'

        404:
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'

    delete:
        tags:
        - Compendium
        summary: Delete compendium
        description: |
          To delete a compendium **candidate**, an HTTP <code>DELETE</code> request can be send to the compendium endpoint.

          <div class="note green_note">
            <p><b>&#x26A0; Important</b></p>
            <p>Once a compendium is not a candidate anymore, it can only be deleted by admins with the required user level. The compendium contents should be moved to a specific location to the server as a backup.</p>
          </div>
          <div class="note blue_note">
            <p><b>&#x26A0; Required user level for candidate deletion</b></p>
            <p>The user deleting a candidate must be the author or have the required user level.</p>
          </div>

          ## Request

          The following request deletes the compendium with the identifier 12345, including metadata and files.

          ```
          curl -X DELETE https://…/api/v1/compendium/12345 \
          --cookie "connect.sid=<code string here>"

          ```

        operationId: delete_compendium
        security:
          - cookie_authenification: []
        responses:
          204:
            description: |
              The response has an HTTP status of `204` and an empty body for successful deletion.
          401:
            description: Unauthorized due to user not being logged in.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  delete_unauthorized:
                    $ref: '#/components/examples/unauthorized'
          403:
            description: Forbidden due to userlevel not being high enough.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  delete_unauthorized:
                    $ref: '#/components/examples/delete_forbidden'
          404:
            description: No compendium with the given id found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/general_error_model'
                examples:
                  view_success:
                    $ref: '#/components/examples/delete_not_found'

  /compendium/{compendium_id}.{file_extension}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
      - $ref: '#/components/parameters/file_extension'

    get:
      tags:
       - Compendium
      summary: Download compendium
      description: |
        Download compendium files as an archive.

        <div class="note yellow_note">
          <p><b>&#x26A0; Warning</b></p>
          <p>This download feature does not provide access to complete and valid compendia, because it does not comprise an update of the packaging, while it does include brokered metadata files. To download a valid compendium, create a shipment with the appropriate recipient.</p>
        </div>
        Supported formats are as follows:

        - `zip`
        - `tar`
        - `tar.gz`

        ## Request
        `GET /api/v1/compendium/$ID.zip`

        ```
        GET /api/v1/compendium/:id.zip
        GET /api/v1/compendium/:id.tar
        GET /api/v1/compendium/:id.tar.gz
        GET /api/v1/compendium/:id.tar?gzip
        GET /api/v1/compendium/:id.zip?image=false
        ```

      operationId: download_compendium
      parameters:
        - $ref: '#/components/parameters/gzip_query'
        - $ref: '#/components/parameters/image_query'
      responses:
        200:
          description: |
            The response is a file attachment. The suggested file name is available in the HTTP header content-disposition using the respective file extension for a file named with the compendium identifier (e.g. `wdpV9.zip`, `Uh1o0.tar`, or `LBIt1.tar.gz`).
          content:
            application/zip:
              examples:
                download_success:
                  $ref: '#/components/examples/download_success'
            application/x-tar:
              examples:
                download_success:
                 $ref: '#/components/examples/download_success'
            application/octet-stream:
              examples:
                download_success:
                 $ref: '#/components/examples/download_success'
        404:
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'
        
        400:
          description: A bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/download_bad_request' #Muss das hier geupdated werden?
                  
  /compendium/{compendium_id}/jobs:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get: 
      tags:
        - Compendium
      summary: List related execution jobs
      description: |
        `curl https://…/api/v1/compendium/$ID/jobs`

        `GET /api/v1/compendium/:id/jobs`

      operationId: compendium_list_job
      responses:
        200:
          description: Returns a JSON object with the jobs related to the compendium
          content:
            application/json:
              examples:
                job_list_simple:
                  $ref: '#/components/examples/compendium_list_job_success'
                job_list_fail:
                  $ref: '#/components/examples/job_list_fail'
                  
  /compendium/{compendium_id}/metadata:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
        - Compendium
      summary: Get the metadata acompendium
      description: |
        The following endpoint allows to access only the normative o2r-metadata element:
        
        `curl https://…/api/v1/$ID/metadata`
        
        `GET /api/v1/compendium/:id/metadata`
      operationId: get_metadata
      security:
        - cookie_authenification: []
      responses:
        200:
          description: The o2r-metadata object of the specified compendium
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_response'
              examples:
                metadata_success:
                  $ref: '#/components/examples/metadata_success'
                metadata_spatial:
                  $ref: '#/components/examples/metadata_spatial'
        404:
          description: No compendium with the given id found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                view_success:
                  $ref: '#/components/examples/view_not_found'
        
    put:
      tags:
        - Compendium
      summary: Update the metadata acompendium
      description: |
        The following endpoint can be used to update the `o2r` metadata elements.
        All other metadata sub-properties are only updated by the service itself, i.e. brokered metadata.
        After creation the metadata is persisted to both files and database, so updating the metadata via this endpoint allows to trigger a brokering process and to retrieve different metadata formats either via this metadata API or via downloading the respective file using the download endpoint.
        
        <div class="note blue_note">
          <p><b>&#x26A0; Metadata update rights</b></p>
          <p> Only authors of a compendium or users with the required user level can update a compendium's metadata.</p>
        </div>
        
        ### Metadata update request
        
        ```
        curl -H 'Content-Type: application/json' \
          -X PUT \
          --cookie "connect.sid=<code string here>" \
          -d '{ "o2r": { "title": "Blue Book" } }' \
          /api/v1/compendium/:id/metadata
        ```
        The request overwrites the existing metadata properties, so the full o2r metadata must be put with a JSON object called `o2r` at the root, even if only specific fields are changed.
      security:
        - cookie_authenification: []
      responses:
        200:
          description: Successfull metdata update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata_response'
              examples:
                metadata_update_success:
                  $ref: '#/components/examples/metadata_update_success' 
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                metadata_unauthorized:
                  $ref: '#/components/examples/metadata_unauthorized' 
        400:
          description: Bad Request
          content:
            application/json:
              examples:
                metadata_bad_request_incomplete_metadata:
                  $ref: '#/components/examples/metadata_bad_request_incomplete_metadata'
                metadata_bad_request_syntax_error:
                  $ref: '#/components/examples/metadata_bad_request_syntax_error'
        422:
          description: Unprocessable Enitity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                metadata_unprocessable_entity:
                  $ref: '#/components/examples/metadata_unprocessable_entity' 
                  
  /compendium/{compendium_id}/link:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    put:
      tags:
        - Extras
      summary: Create link
      description: |
        The following request creates a link for the candidate compendium with the identifier 12345.
        ```
        curl -X PUT https://…/api/v1/compendium/12345/link \
            --cookie "connect.sid=<code string here>"
        ```
      operationId: upload_link
      security:
        - cookie_authenification: []
      responses: 
        200:
          description: Link creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link_response'
              examples:
                link_success:
                  $ref: '#/components/examples/link_success'
        401:
          description: Bad Request due to not supported content_type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/metadata_unauthorized'
        404:
          description: Unauthorized due to user not being logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                not_found:
                  $ref: '#/components/examples/delete_not_found'
      
        
    delete:
      tags:
        - Extras
      summary: Create link
      description: |
        The following request deletes a link for the candidate compendium with the identifier 12345.
        ```
        curl -X DELETE https://…/api/v1/compendium/12345/link \
            --cookie "connect.sid=<code string here>"
        ```
      operationId: delete_link
      security:
        - cookie_authenification: []
      responses: 
        204:
          description: Link deletion successfull 
        401:
          description: Bad Request due to not supported content_type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/metadata_unauthorized'
        403:
          description: Forbidden due to user level not allowing upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                Forbidden:
                  $ref: '#/components/examples/delete_forbidden'
        404:
          description: Unauthorized due to user not being logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                not_found:
                  $ref: '#/components/examples/delete_not_found'    
                

  #Inspection paths
  /inspection/{compendium_id}:
    parameters:
      - $ref: '#/components/parameters/compendium_id'
    get:
      tags:
        - Compendium
      summary: Compendium file listing
      description: |
        The file listing is returned in the single view of a job or compendium. It includes the complete content of the bagtainer in its current state.
        If a job has been run and the programme outputs new data, this new data is included as well.
        
        File listings are represented as a Object. The file structure for a synthetic job `nj141` is as follows.
        
        ```text
        nj141
        ├── bagit.txt
        └── data
            ├── paper.Rmd
            └── Dockerfile
        ```
        
        is be represented as
        
        ```json
        {
          "path": "/api/v1/job/nj141/data",
          "name": "nj141",
          "children": [
            {
              "path": "/api/v1/job/nj141/data/bagit.txt",
              "name": "bagit.xt",
              "type": "text/plain",
              "size": 55
            },
            {
              "path": "/api/v1/job/nj141/data/data",
              "name": "data",
              "children": [
                {
                  "path": "/api/v1/job/nj141/data/data/paper.Rmd",
                  "name": "paper.Rmd",
                  "type": "text/plain",
                  "size": 346512
                }
                {
                  "path": "/api/v1/job/nj141/data/data/Dockerfile",
                  "name": "Dockerfile",
                  "type": "text/plain",
                  "size": 1729
                }
              ]
            }
          ]
        }
        ```
        
        ## `path` property
        
        The `path` property for each file in the listing is a link to the raw file. Additionally the `GET` parameter `?size=…` can be appended to retrieve previews of the files. In the case of Images (`png`, `jpg`, `gif`, `tiff`), the value defines the maximum width/height. For text files (`txt`, `csv`, scripts), the value defines the amount of lines returned.
        
        ### `type` property
        
        The `type` property is a best guess for the MIME type of the file content. It is a result of the files extension. Look at the list of extension to type mapping below.
        
        ## File extension to MIME type mappings
        
        This list contains the custom mapping of file extensions to MIME types used in the server.
        
        | Extension        | MIME type          |
        |------------------|--------------------|
        | `.R`, `.r`       | `script/x-R`       |
        |  `.RData`, `.Rdata`, `.rdata`, `.rda`   |  `application/x-r-data`  |
        
        ## File inspection: RData

        `.RData` files are a [binary format](https://stat.ethz.ch/R-manual/R-devel/library/base/html/save.html) for usage with R to save any kind of object (data, functions) using an internal serialisation.
        The format is [not suitable](https://www.loc.gov/preservation/digital/formats/fdd/fdd000470.shtml) for archival or data exchange, but might be included in a compendium out of negligence by or convenience for the author.
        
        Since the file format is binary and not readable by non-R client applications, the API provides the endpoint `/api/v1/inspection` to retrieve a JSON representation of the objects in an RData file.
        
        Values of objects are provided as JSON arrays following the specifications by the R package [`jsonlite`](https://cran.r-project.org/package=jsonlite).
      operationId: get_file
      parameters:
        - $ref: '#/components/parameters/file_query'
        - $ref: '#/components/parameters/objects_query'
      responses:
        200: 
          description: Returns the file is represented as a JSON array
          content:
            application/json:
              examples:
                files_simple:
                  $ref: '#/components/examples/files_simple'
                files_complex_1:
                  $ref: '#/components/examples/files_complex_1'
                files_complex_2:
                  $ref: '#/components/examples/files_complex_2'
                files_objects_errors:
                  $ref: '#/components/examples/files_objects_errors'
                
        400:
          description: Returns the file is represented as a JSON array
          content:
            application/json:
              examples:
                files_simple:
                  $ref: '#/components/examples/files_bad_request_1'
                files_complex_1:
                  $ref: '#/components/examples/files_bad_request_2'
                files_complex_2:
                  $ref: '#/components/examples/files_bad_request_3'
        500:
          description: Returns the file is represented as a JSON array
          content:
            application/json:
              examples:
                files_simple:
                  $ref: '#/components/examples/files_server_error'

  #Job paths
  /job:
    post:
      tags:
       - Compendium
      summary: Create a new job
      description: |
        Create and run a new execution job with an HTTP POST request using multipart/form-data. Requires a compendium_id.
        <div class="note blue_note">
          <p><b>&#x26A0; Required user level and authentication</b></p>
          <p>The user creating a new compendium must have the required user level. Requests must be authenticated with a cookie `connect.sid`, see user authentication.</p>
        </div>
        
        `curl -F compendium_id=$ID https://…/api/v1/job`
        
        `POST /api/v1/job`
        
      operationId: create_job
      security:
        - cookie_authenification: []
      requestBody:
        description: |
          The Compendium to be uploaded.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_job'
      responses:
        200:
          description: A successfull job creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_response'
              examples:
                job_success:
                  $ref: '#/components/examples/job_success'
        404:
          description: No matching compendium found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/general_error_model'
              examples:
                not_found:
                  $ref: '#/components/examples/view_not_found'
        500:
          description: Internal server Error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/general_error_model'
              examples:
                not_found:
                  $ref: '#/components/examples/job_server_error'
    
    get: 
      tags:
        - Compendium
      summary: List Jobs
      description: |
        Lists jobs with filtering and pagination, returning up to 100 results by default.

        Results are be sorted by descending date of last change. The content of the response can be limited to certain properties of each result by providing a list of fields, i.e. the parameter `fields`.
        
        Results can be filtered:
        
        - by `compendium_id` i.e. `compendium_id=a4Dnm`,
        - by `status` i.e. `status=success` or
        - by `user` i.e. `user=0000-0000-0000-0001`
        
        `curl https://…/api/v1/job?limit=100&start=2&compendium_id=$ID&status=success&fields=status`
      parameters:
        - $ref: '#/components/parameters/compendium_id_query'
        - $ref: '#/components/parameters/start_query'
        - $ref: '#/components/parameters/limit_query'
        - $ref: '#/components/parameters/user_query'
        - $ref: '#/components/parameters/fields_query'
      operationId: list_job
      responses:
        200:
          description: Returns a JSON object with the matching jobs
          content:
            application/json:
              examples:
                job_list_simple:
                  $ref: '#/components/examples/job_list_simple'
                job_list_expanded:
                  $ref: '#/components/examples/job_list_expanded'
                job_list_fail:
                  $ref: '#/components/examples/job_list_fail'
            
  /job/{job_id}:
    parameters:
      - $ref: '#/components/parameters/job_id_path'
    get:
      tags:
        - Compendium
      summary: View single job
      description: |
        View details for a single job. The file listing format is described in compendium files.
      parameters:
        - $ref: '#/components/parameters/steps_query'
      operationId: view_job
      responses:
        200:
          description: Returns a JSON object with job details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view_job_response'
              examples:
                view_job_success:
                  $ref: '#/components/examples/view_job_success'
        404:
          description: No matching compendium found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/general_error_model'
              examples:
                not_found:
                  $ref: '#/components/examples/view_not_found'
  
  #Recipient paths
  /recipient:
    get:
      tags: 
        - Compendium
      summary: Supported recipients
      description: | 
        Use the _recipient_ endpoint to find out, which repositories are available and configured.
        The response is list of tuples with `id` and `label` of each repository.
        The `id` is the repository identifier to be used in requests to the `/shipment` endpoint, e.g. to define the recipient, while `label` is a human-readable text string suitable for display in user interfaces.
        An implementation may support one or more of the following repositories:
        
        - `b2share` - [Eudat b2share](https://b2share.eudat.eu/)
        - `b2share_sandbox` - [Eudat b2share Sandbox](https://trng-b2share.eudat.eu/)
        - `zenodo` - [Zenodo Sandbox](https://zenodo.org)
        - `zenodo_sandbox` - [Zenodo Sandbox](https://sandbox.zenodo.org)
        
        The `download` recipient is a surrogate to enable shipping to the user's local storage.
      operationId: list_reciepients
      responses:
        200: 
          description: Retruns A JSON object with all supported recipients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipient_response'
              examples:
                recipient_success:
                  $ref: '#/components/examples/recipient_success'

  #Shipment paths
  /shipment:
    get:
      tags:
        - Compendium
      summary: List shipments
      description: |
        This is a basic request to list all shipments identifiers.
        `GET /api/v1/shipment`
        You can also get only the shipment identifiers belonging to a compendium id (e.g. `4XgD97`).

        `GET /api/v1/shipment?compendium_id=4XgD97`
      operationId: list_shipment
      parameters:
        - $ref: '#/components/parameters/compendium_id_shipment_query'
      responses:
        200:
          description: A list of all shuipment ids.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shipment_response'
              examples:
                list_success:
                  $ref: '#/components/examples/shipment_success'
                  
  /shipment/{shipment_id}:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
    get:
      tags:
        - Compendium
      summary: Get a single shipment
      description: |
        Example request:
        
        `GET /api/v1/shipment/dc351fc6-314f-4947-a235-734ab5971eff`
      operationId: view_shipment
      responses:
        200: 
          description: A json object with the matching results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view_shipment_response'
              examples:
                view_shipment_success:
                  $ref: '#/components/examples/view_shipment_success' 
    
    post: 
      tags:
        - Compendium
      summary: Create a new shipment
      description: |
        You can start a initial creation of a shipment, leading to transmission to a repository and creation of a deposition, using a `POST` request.

        `POST /api/v1/shipment`
        
        <div class="note blue_note">
          <p><b>&#x26A0; Required user level</b></p>
          <p>The user sending the request to create a shipment must have the required [user level](user/levels.md).</p>
        </div>
        


      operationId: upload_shipment
      security:
      - cookie_authenification: []
      requestBody:
        description: |
          The shipment to be uploaded.

        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_shipment'
      responses:
        201:
          description: |
            The response contains the shipment document, see Get a single shipment. Some of the fields are not available (have value `null`) until after publishing, e.g. `deposition_url`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_shipment_response'
              examples:
                upload_shipment_success:
                  $ref: '#/components/examples/upload_shipment_success'
        202:
          description: | 
            If the recipient is the download surrogate, the response will be `202` and a zip stream with the Content type `application/zip`. The download zip stream is also available under the url of the shipment plus /dl, once it has been created, e.g.:

            `http://localhost:8087/api/v1/shipment/22e7b17c-0047-4cb9-9041-bb87f30de388/dl`

          
          content:
            application/zip:
              examples:
                upload_shipment_zip:
                  $ref: '#/components/examples/upload_shipment_zip'
                  
  /shipment/{shipment_id}/status:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
      
    get:
      tags:
        - Compendium
      summary: Shipment status
      description: |
        A shipment can have three possible status:

        - `shipped` - a deposition has been created at a repository and completed the necessary metadata for publication.
        
        - `published` - the contents of the shipment are published on the repository, in which case the publishment can not be undone.
        
        - `error` - an error occurred during shipment or publishing.
        
        To get only a shipment's current status you may use the sub-resource `/status`.
        
      operationId: shipment_status
      responses:
        200:
          description: Retruns A JSON object with the shipment id and status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shipment_status_response'
              examples:
                shipment_status_success:
                  $ref: '#/components/examples/shipment_status_success'
      
  /shipment/{shipment_id}/publishment:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
    
    put:
      tags:
        - Compendium
      summary: Publish in a deposition
      description: |
        The publishment is supposed to have completed the status shipped where metadata requirements for publication have been checked.
      
         <div class="note blue_note">
          <p><b>&#x26A0; Note</b></p>
          <p>Once published, a deposition can no longer be deleted on the supported repositories.</p>
        </div>
        
        `PUT api/v1/shipment/<shipment_id>/publishment`
        
        Note that a publishment is not possible if the recipient is the download surrogate which immediately results in a zip stream as a response.
        
      responses: 
        200:
            description: Returns a JSON object with the id and status of the shipment
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/shipment_status_response'
                examples:
                  job_list_simple:
                    $ref: '#/components/examples/publish_put_success'
    
    get:
      tags:
        - Compendium
      summary: List deposition files
      description: |
        You can request a list of all files in a deposition and their properties with the sub-resource `/publishment`.

        `GET api/v1/shipment/<shipment_id>/publishment`
        
        You can find the `id` of the file you want to interact with in this json list object at `files[n].id`, where `n` is the position of that file in the array.
        Files can be identified in this response by either their id in the depot, their filename or their checksum.
      
      responses:
        200:
          description: Returns a JSON object with all the deposition files of this shipment.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/shipment_files_response'
              examples:
                shipment_files_success:
                    $ref: '#/components/examples/shipment_files_success'
      
  /shipment/{shipment_id}/files/{file_id}:
    parameters:
      - $ref: '#/components/parameters/shipment_id'
      - $ref: '#/components/parameters/file_id'
    
    delete:
      tags:
        - Compendium
      summary: Delete a specific file from a deposition
      description: | 
        You can delete files from a `shipped` shipment's deposition. You must state a file's identifier, which can be retrieved from the shipment's deposition files property `id`, as the `file_id` path parameter. Files for a `published` shipment usually cannot be deleted.

        `DELETE api/v1/shipment/<shipment_id>/files/<file_id>`
      
      responses:
        204:
          description: Deletion successfull
        
  #Substitution paths
  /substitution:
    description: |
      Substitution is the combination of an base compendium, "base" for short, and an overlay compendium, or "overlay".
      A user can choose files from the overlay to replace files of the base, or upload new files.
      Additionally the user can choose, if the metadata of the base ERC will be adopted for substitution (`keepBase`) or there will be a new extraction of the metadata for the substituted ERC.
      This new extraction is divided into two choices.
      The user can let the new extracted metadata be merged into the existing metadata of the base ERC (`extractAndMerge` - **not implemented**) or just save the extracted metadata (`extract` - **not implemented**).
    post:
      tags:
        - Extras
      summary: Create substitution
      description: |
        `Create substitution` produces a new compendium with its own files in the storage and metadata in the database.
        A substitution can be created with an HTTP `POST` request using `multipart/form-data` and content-type `JSON`.
        Required content of the request are the identifiers of the base and overlay compendia and at least one pair of _substitution files_, consisting of a base file and an overlay file.
        
        <div class="note blue_note">
          <p><b>&#x26A0; Note</b></p>
          <p>  A substitution process removes potentially existing packaging information, i.e. if the base compendium was a BagIt bag, the substitution will only contain the payload directory contents (<code>/data</code> directory).
          
          
          The overlay file is stripped of all paths and is copied directly into the substitution's root directory.</p>
        </div>

        `POST /api/v1/substitution`

        <div class="note blue_note">
          <p><b>&#x26A0; Required user level</b></p>
          <p>The user creating a new substitution must have the required user level.</p>
        </div>
        
        You can view the newly suvbstituted Compendium with the standard get Request for compendium view `GET /api/v1/compendium/:id`. The response will include extra metadata on the substitution.

      operationId: upload_substitution
      security:
      - cookie_authenification: []
      requestBody:
        description: |
          The Compendium to be uploaded.

        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/new_substitution'
            examples:
              substitution_request_body:
                $ref: '#/components/examples/substitution_request_body'
                
      responses:
        201:
          description: Creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upload_response'
              examples:
                upload_success:
                  $ref: '#/components/examples/substitution_creation_success'
        401:
          description: Unauthorized due to user level not being sufficient.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                substitution_unauthorized_1:
                  $ref: '#/components/examples/substitution_unauthorized_1'
                substitution_unauthorized_2:
                  $ref: '#/components/examples/substitution_unauthorized_2'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                substitution_not_found_1:
                  $ref: '#/components/examples/substitution_not_found_1'
                substitution_not_found_2:
                  $ref: '#/components/examples/substitution_not_found_2'
    
    get:
      tags:
        - Extras
      summary: List substituted Compenium
      description: |
        `curl https://.../api/v1/substitution`
        
        `GET /api/v1/substitution`

      operationId: view_substitution
      security:
        - cookie_authenification: []
      parameters:
        - $ref: '#/components/parameters/overlay_query'
        - $ref: '#/components/parameters/base_query'
      responses:
        200:
          description: The successfull Listing of all the substitutions as JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
              examples:
                substitution_list_success:
                  $ref: '#/components/examples/substitution_list_success'
                substitution_list_fail:
                  $ref: '#/components/examples/substitution_list_fail'
                substituion_list_base:
                  $ref: '#/components/examples/substitution_list_base'
                substitution_list_overlay:
                  $ref: '#/components/examples/substitution_list_overlay'
                substitution_list_base_overlay:
                  $ref: '#/components/examples/substitution_list_base_overlay'
        400:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                substitution_undefined_1:
                  $ref: '#/components/examples/substitution_undefined_1'
                substitution_undefined_2:
                  $ref: '#/components/examples/substitution_undefined_2'
        401:
          description: The successfull Listing of all the substitutions as JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                substitution_unauthorized_1:
                  $ref: '#/components/examples/substitution_unauthorized_1'
                substitution_unauthorized_2:
                  $ref: '#/components/examples/substitution_unauthorized_2'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                substitution_not_found_1:
                  $ref: '#/components/examples/substitution_not_found_1'
                substitution_not_found_2:
                  $ref: '#/components/examples/substitution_not_found_2'
                
  #Link paths
  /link:
    get:
      tags:
        - Extras
      summary: List links
      description: |
        ```
        curl -X GET http://localhost/api/v1/link
             --cookie "connect.sid=s%3AVU61x4E<rest of cookie>"
        ```
      operationId: list_link
      security:
        - cookie_authenification: []
      responses: 
        200:
          description: Link listing response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link_list_response'
              examples:
                link_list_success:
                  $ref: '#/components/examples/link_list_success'
        401:
          description: Bad Request due to not supported content_type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                unauthorized:
                  $ref: '#/components/examples/metadata_unauthorized'
          
                  
  #User Paths
  /user:
    get:
      tags:
        - Users
      summary: List users
      description: |
        Return a list of user ids. Pagination (including defaults) as described for compendia is available for users.
        
        `curl https://…/api/v1/user`
        
        `GET /api/v1/user`
        
      operationId: list_user
      parameters:
        - $ref: '#/components/parameters/user_start_query'
        - $ref: '#/components/parameters/user_limit_query'
      responses: 
        200:
          description: User listing response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_response'
              examples:
                user_list_success:
                  $ref: '#/components/examples/user_list_success'
                user_list_fail:
                  $ref: '#/components/examples/user_list_fail'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_list_bad_request:
                  $ref: '#/components/examples/user_list_bad_request'
      
  /user/{user_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'
    get: 
      tags:
        - Users
      summary: View a single user
      description: |
        Show the details of a user.

        `curl https://…/api/v1/user/$ID`

        `GET /api/v1/user/:id`
        
      operationId: view_user
      responses: 
        200:
          description: View user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_view_response'
              examples:
                user_view_simple:
                  $ref: '#/components/examples/user_view_simple'
                user_view_expanded:
                  $ref: '#/components/examples/user_view_expanded'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_list_bad_request:
                  $ref: '#/components/examples/user_not_found'
    
    patch:
      tags:
        - Users
      summary: Edit user
      description: |
        You can update information of an existing user using the `HTTP` operation `PATCH`.
        Change user level request
        
        The user level can be changed with an `HTTP` `PATCH` request. The new level is passed to the API via a query parameter, i.e. ..?level=<new level value>. The value must be an int (integer). The response is the full user document with the updated value.
        
        
        <div class="note blue_note">
          <p><b>&#x26A0; Required user level</b></p>
          <p>The user sending the request to change the level must have the required user level.</p>
        </div>
        
      operationId: edit_user
      parameters:
        - $ref: '#/components/parameters/user_level_query'
      responses: 
        200:
          description: Edit user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_view_response'
              examples:
                user_view_simple:
                  $ref: '#/components/examples/user_edit_response'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_edit_bad_request:
                  $ref: '#/components/examples/user_edit_bad_request'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_unauthorized:
                  $ref: '#/components/examples/unauthorized'
        403:
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_list_bad_request:
                  $ref: '#/components/examples/user_edit_forbidden'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_list_bad_request:
                  $ref: '#/components/examples/user_not_found'

  #Auth paths
  /auth/login:
    get:
      tags:
        - Users
      summary: Start OAuth login
      description: |
        Navigate the web browser (e.g. via a HTML `<a>` link) to `/api/v1/auth/login`, which then redirects the user and request access to your ORCID profile. After granting access, ORCID redirects the user back to the `/api/v1/auth/login` endpoint with a unique `code` param that is used to verify the request.

        If the verification was successful, the endpoint returns a session cookie named `connect.sid`, which is tied to a authenticated session. The server answers with a `301 redirect`, which redirects the user back to `/`, the start page of the o2r website.
        
        If the login is unsuccessful, the user is not redirected back to the site and no further redirects are configured.
      operationId: login_user
      responses:
        301:
          description: Access request for OCRID profile then it will redirect to the [Main Page](https://o2r.uni-muenster.de/#/)
  /auth/whoami:
    get:
      tags:
        - Users
      summary: Request authentication status
      description: |
        As the cookie is present in both authenticated and unauthenticated sessions, clients (e.g. web browser user interfaces) must know if their session is authenticated, and if so, as which ORCID user. For this, send a `GET` request to the `/api/v1/auth/whoami` endpoint, including your session cookie.

        `curl https://…/api/v1/auth/whoami --cookie "connect.sid=…`
        
        `GET /api/v1/auth/whoami`
      operationId: whoami_user
      security:
        - cookie_authenification: []
      responses: 
        200:
          description: Returns ocrid id and user name as a JSON object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/user_whoami_response'
              examples:
                user_whoami_success:
                    $ref: '#/components/examples/user_whoami_success'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general_error_model'
              examples:
                user_unauthorized:
                  $ref: '#/components/examples/unauthorized'  

components:
  schemas:
    #Request Bodies
    new_compendium:
      type: object
      properties:
        content_type:
          description: |
            The Type of archive that is to be uploaded. Can be `compendium` or `workspace`.
            - `compendium` - compendium,
            which is expected to be complete and valid, for *examination* of a compendium

            - `workspace` - formless workspace, for *creation* of a compendium

            <div class="note yellow_note">
              <p><b>&#x26A0; Warning</b></p>
              <p>If a complete ERC is submitted as a workspace, it may result in an error, or the contained metadata and other files may be overwritten by the creation process.</p>
            </div>

          type: string
          enum:
            - compendium
            - workspace
        compendium:
          description: The archive file as a compressed .zip
          type: string
          format: binary
    
    new_job:
      type: object
      properties:
        compendium_id:
          description: |
            The identifier of the compendium to base this job on.
          type: string
      required:
        - compendium_id
        
    new_shipment:
      type: object
      properties:
        compendium_id: 
          type: string
          description: The id of the compendium
        recipient:
          type: string
          description: The id of the compendium
        update_packaging:
          type: boolean
          default: false
          description: |
            The shipment creation only succeeds if a valid package is already present under the provided compendium identifier, or if no packaging is present at all and a new package can be created. In case a partial or invalid package is given, this parameter can control the shipment creation process: If it is set to `true`, the shipment package is updated during the shipment creation in order to make it valid, if set to `false` the shipment creation results in an error.
        cookie:
          type: string
          description: |
            An authentication cookie must be set in the request header, but it may also be provided via a `cookie` form parameter as a fallback
        shipment_id:
          type: string
          description: |
             A user-defined identifier for the shipment (see id in response)
      
      required:
        - compendium_id
        -  recipient
        
    new_substitution:
      type: object
      properties:
        base:
          type: string
          description: id of the base compendium
        overlay:
          type: string
          description: id of the overlay compendium
        substitutionFiles:
          type: array
          description: Array of file substitutions specified by `base` and `overlay`
          items:
            type: object
            properties: 
              base:
                type: string
                description: name of the file from base compendium
              overlay:
                type: string
                description: name of the overlay compendium that is exchanged for the original file
        metadataHandling:
          type: string
          enum:
            - keepBase
            - extractAndMerge
            - extract
          description: |
            property to specify, if the metadata of the base ERC will be adopted (`keepBase` = **keep metadata** of base ERC) or there will be a new extraction of metadata, that will be merged into the metadata of the base ERC (`extractAndMerge` = **extract and merge metadata** for new ERC) or that will not be merged (`extract` = **extract metadata** of new ERC)
      
    #Responses
    upload_response:
      type: object
      properties:
        id:
          type: string
          
    list_response:
      type: object
      properties:
        results:
          type: array
          items:
            type: string
            
    view_response:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/user_id'
        metadata:
          type: object
        created:
          type: string
          format: date-string
        user:
          type: string
        bag:
          type: boolean
        compendium:
          type: boolean
        substituted:
          type: boolean
        files:
          type: object
          
    metadata_response:
      type: object
      properties:
        id:
          type: string
        metadata:
          type: object
          properties:
            o2r:
              type: object
              
    job_response:
      type: object
      properties:
        job_id:
          type: string
          
    view_job_response:
      type: object
      properties:
        id:
          type: string
        compendium_id:
          type: string
        steps::
          type: object
        status:
          type: string
          enum:
            - success
            - failure
            - running
        files:
          type: object
          
    recipient_response:
      type: object
      properties:
        recipients:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              label:
                type: string
                
    shipment_response:
      type: array
      items:
        type: string
        
    view_shipment_response:
      type: object
      properties:
        id:
          type: string
        compendium_id:
          type: string
        deposition_id:
          type: string
        deposition_url:
          type: string
        update_packaging:
          type: string
        recipient:
          type: string
        last_modified:
          type: string
          format: date-time
        user:
          type: string
        status:
          type: string
          enum:
           - shipped
           - published
           - error
        md:
          type: object
          
    upload_shipment_response:
      type: object
      properties:
        id:
          type: string
        deposition_id:
          type: string

        recipient:
          type: string
        status:
          type: string
          enum:
           - shipped
           - published
           - error
           
    shipment_status_response:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - shipped
            - published
            - error
         
    shipment_files_response:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            
    link_response:
      type: object
      properties:
        id:
          type: string
        compendium_id:
          type: string
        user:
          type: string
          format: user_id
    
    link_list_response: 
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              compendium_id:
                type: string
              user:
                type: string
                format: user_id
                
    user_view_response:
      type: object
      properties:
        id:
          type: string
          format: user_id
        name:
          type: string
        level: 
          type: integer
        lastseen:
          type: string
          format: datetime
      required:
        - id
        - name
          
    user_whoami_response:
      type: object
      properties:
        ocrid:
          type: string
        name: 
          type: string
    
    #Errors
    general_error_model:
      type: object
      properties:
        error:
          type: string

    #Name tba
    user_id:
      type: string
      pattern: "^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$" #regex to much?

  parameters:
    #Query Parameters
    ##List Query Parameters
    job_id_query:
      name: job_id
      in: query
      description: Comma-separated list of related job ids to filter by.
      required: false
      schema:
        type: string
        
    user_query:
      name: user
      in: query
      description:  Public user identifier to filter by.
      required: false
      schema:
        type: string
        
    doi_query:
      name: doi
      in: query
      description: A DOI to filter by.
      required: false
      schema:
        type: string
        
    start_query:
      name: start
      in: query
      description: Starting point of the result list. <code>start - 1</code> results are skipped. Defaults to <code>1</code>.
      required: false
      schema:
        type: integer
        default: 1
        
    limit_query:
      name: limit
      in: query
      description: Limits the number of results in the response. Defaults to <code>100</code>.
      required: false
      schema:
        type: integer
        default: 100
        
    compendium_id_query:
      name: compendium_id
      in: query
      description: Comma-separated list of related compendium ids to filter by.
      required: false
      schema:
        type: string
        
    fields_query:
     name: fields
     in: query
     description: |
      Specify which additional attributes results list should contain. Can contain following fields: `status`, `user`. Defaults to none.
     required: false
     schema:
      enum: 
        - status
        - user
        - status, user
        
    steps_query:
      name: steps
      in: query
      description: |
        The properties `status`, `start` and `end` of _all steps_ are always included in the response.

        Supported values for `steps` are `all` or a comma separated list of one or more step names, e.g. `generate_configuration,check`.
        The response will contain the default properties for all steps but other properties only for the selected ones.
        Any other values for `steps` or not providing the parameter at all will return the default (e.g. `steps=no`).
      required: false
      schema: 
        type: string
        
    compendium_id_shipment_query:
      name: compendium_id
      in: query
      description: The identifier of a specific compendium
      required: false
      schema:
        type: string
        
    ##Download Parameters
    gzip_query:
      name: gzip
      in: query
      description: |
        *only for .tar endpoint* - compress tarball with gzip
      required: false
      schema:
        type: string
        
    image_query:
      name: image
      in: query
      description: |
        `?image=true` or `?image=false` - include tarball of Docker image in the archive , default is true
      required: false
      schema:
        type: boolean
        default: true
    
    ##File Parameters
    file_query:
      name: file
      in: query
      description: |
        the name of the file to inspect, or a relative path to a file within the compendium
      required: true
      schema:
        type: string
        
    objects_query:
      name: objects
      in: query
      description: |
        the name of objects in the file
      required: false
      schema:
        type: string
        
    ##Substitution Parameters
    overlay_query:
      name: overlay
      in: query
      description: id of the overlay compendium that the results should be related to
      required: false
      schema:
        type: string
        
    base_query:
      name: base
      in: query
      description: id of the base compendium that the results should be related to
      required: false
      schema:
        type: string
    
    ##User Parameters
    user_start_query:
      name: start
      in: query
      description: |
        `start` is the index of the first list item in the response, defaults to `1`. It must be numeric and larger than `0`.
      schema:
        type: integer
        default: 1
      
    user_limit_query:
      name: limit
      in: query
      description: |
        `limit` is the number of results in the response, defaults to `100`. It numeric and larger than `0`.
      schema:
        type: integer
        default: 100
        
    user_level_query:
      name: level
      in: query
      schema:
        type: integer
    
    ##Path Parameters
    compendium_id:
      name: compendium_id
      in: path
      description: Id of the compendium
      required: true
      schema:
        type: string
        
    file_extension:
      name: file_extension
      in: path
      description: File Extension for Compendium Download
      required: true
      schema:
        type: string
        enum:
        - zip
        - tar
        - tar.gz
        
    job_id_path:
      name: job_id
      in: path
      description: Id of the job
      required: true
      schema:
        type: string
        
    shipment_id:
      name: shipment_id
      in: path
      description: Id of the shipment
      required: true
      schema:
        type: string
        
    file_id:
      name: file_id
      in: path
      description: Id of the File
      required: true
      schema:
        type: string
        
    user_id:
      name: user_id
      in: path
      description: Id of the user
      required: true
      schema:
        type: string

  examples:
    #Response Examples
    ##Upload Response Examples
    upload_success:
      summary: A upload success example
      value: {'id': 'a4Nd1'}
      
    upload_forbidden:
      summary: A forbidden example
      value: {'error':'user level does not allow compendium creation'}

    ##List Response Examples
    list_success:
      summary: Successful Listing
      description: Returns all the matching compendia as an array
      value: {"results": ["nkm4b","nb2sm", ...]}
      
    list_fail:
      summary: No matching compendium found
      description: |
        If there is no compendium found, the service returns an empty list.\
        `GET /api/v1/compendium?doi=not_a_doi`
      value: {"results": []}

    ##View Response Examples
    view_success:
      summary: A view success example
      description: Returns a object with informations about the matching compendium.
      value: {"id":"comid", "metadata": ..., "created":"2016-08-01T13:57:40.760Z", "user":"0000-0001-0273-7906", "files": ..., "bag": true, "compendium": true, "supstituted": true} #How to represent an object
      
    view_not_found:
      summary: A not found example
      description: Returns an error
      value: {"error":"no compendium with this id"}

    ##Delete Response Examples
    delete_forbidden:
      summary: A deletion forbidden example
      description: Returns an error
      value: {"error":"user level not sufficient to delete compendium"}
      
    delete_not_found:
      summary: A deletion not found example
      description: Returns an error
      value: {"error":"compendium not found"}

    ##Metadata Response Examples
    view_metadata:
      summary: An expanded example with metadata
      description: The metadata for an example compendium
      value: {"id":"12345","metadata": {"raw": {"title": "Programming with Data. Springer, New York, 1998. ISBN 978-0-387-98503-9.","author": "John M. Chambers","more content": ...,},"o2r": {"title": "Programming with Data","creators": [{"name": "John M. Chambers"}],"publication_date": 1998,"more content": ...,},"zenodo": {}},"created": …,"files": …}
      
    metadata_success:
      summary: A success metadata example
      description: |
        Returns a json object with the metadata
      value:
        {
          "id":"compendium_id",
          "metadata": {
            "o2r": {
              "...":"..."
            }
          }
        }
        
    metadata_spatial:
      summary: Spatial property of the metadata object
      description: |
        For discovery purposes, the metadata includes extracted GeoJSON bounding boxes based on data files in a workspace.
        
        Currently supported spatial data sources:
        
        - shapefiles
        
        The following structure is made available per file.
        
        The `spatial` key has a `union` bounding box, that wraps all extracted bounding boxes.
      value: |
        {
          "id":"compendium_id",
          "metadata": {
            "o2r": {
              "spatial": {
                  "files": [
                      {
                          "geojson": {
                              "bbox": [
                                  -2.362060546875,
                                  52.0862573323384,
                                  -1.285400390625,
                                  52.649729197309426
                              ],
                              "geometry": {
                                  "coordinates": [
                                      [
                                          [
                                              -2.362060546875,
                                              52.0862573323384
                                          ],
                                          [
                                              -1.285400390625,
                                              52.649729197309426
                                          ]
                                      ]
                                  ],
                                  "type": "Polygon"
                              },
                              "type": "Feature"
                          },
                          "source_file": "path/to/file1.geojson"
                      },
                      {
                          "geojson": {
                              "bbox": [
                                  7.595369517803192,
                                  51.96245837645124,
                                  7.62162297964096,
                                  51.96966694957956
                              ],
                              "geometry": {
                                  "coordinates": [
                                      [
                                          [
                                              7.595369517803192,
                                              51.96245837645124
                                          ],
                                          [
                                              7.62162297964096,
                                              51.96966694957956
                                          ]
                                      ]
                                  ],
                                  "type": "Polygon"
                              },
                              "type": "Feature"
                          },
                          "source_file": "path/to/file2.shp"
                      }
                  ],
                  "union": {
                      "geojson": {
                          "bbox": [
                              -2.362060546875,
                              51.96245837645124,
                              7.62162297964096,
                              51.96245837645124
                          ],
                          "geometry": {
                              "coordinates": [
                                  [
                                      -2.362060546875,
                                      51.96245837645124
                                  ],
                                  [
                                      7.62162297964096,
                                      51.96245837645124
                                  ],
                                  [
                                      7.62162297964096,
                                      52.649729197309426
                                  ],
                                  [
                                      -2.362060546875,
                                      52.649729197309426
                                  ]
                              ],
                              "type": "Polygon"
                          },
                          "type": "Feature"
                      }
                  }
              }
              "...":"..."
            }
          }
        }
        
    metadata_update_success:
      summary: A success metadata update example
      description: Returns a json object with the updated excerpt.
      value: |
        {
          "id":"compendium_id",
          "metadata": {
            "o2r": {
              "title": "Blue Book"
            }
          }
        }
        
    metadata_unauthorized:
      summary: Unauthorized 
      description: Returns an error, due to not being authorized
      value: {"error":"not authorized"}
      
    metadata_bad_request_incomplete_metadata:
      summary: Bad Request due to Incomplete metadata
      description: Returns an error due to missing metadata in the request (e.g. description property missing)
      value: |
        {
            "error":"Error updating metadata file, see log for details",
            "log": "[o2rmeta] 20180302.085940 received arguments: {'debug': True, 'tool': 'validate', 'schema': 'schema/json/o2r-meta-schema.json', 'candidate': '/tmp/o2r/compendium/1cAIr/data/.erc/metadata_o2r_1.json'}
            [o2rmeta] 20180302.085940 launching validator
            [o2rmeta] 20180302.085940 checking metadata_o2r_1.json against o2r-meta-schema.json
            [o2rmeta] 20180302.085940 !invalid: None is not of type 'string'
        
            Failed validating 'type' in schema['properties']['description']:
                {'type': 'string'}
        
                On instance['description']:
                    None"
        }
        
    metadata_bad_request_syntax_error:
      summary: Syntax error
      value: | 
        "SyntaxEroor [...]"
        
    metadata_unprocessable_entity:
      summary: Unporcessable Entity in metadata update
      description: |
        The JSON doesnt meet the requirements.
      value: {"error":"JSON with root element 'o2r' required"}
    
    ##Download Response Example
    download_success:
      summary: A successfull zip-file Download example
      description: |
        A successfull download of a compendium as a `.zip` file. 
        
        The zip file contains a comment with the original URL.
        ```
        $ unzip -z CXE1c.zip
        Archive:  CXE1c.zip
        Created by o2r [https://…/api/v1/compendium/CXE1c.zip]
        ```
      value: |
        Content-Type: application/zip
        Transfer-Encoding: chunked
        Content-Disposition: attachment; filename="$ID.zip"
        X-Response-Time: 13.556ms
        
    download_bad_request:
      summary: A bad request for download example
      description: Returns an error
      value: {"error":"no job found for this compendium, run a job before downloading with image"}
      
    ##Files Response Examples
    files_simple:
      summary: Simple data type example
      description: |
        Returns a JSON array representation of the data types.
        
        `GET /api/v1/inspection/<compendium id>?file=simple.Rdata`
        
      value: |
        {  
          "aChar":[  
            "a"
          ],
          "aDouble":[  
            2.3
          ],
          "anInteger":[  
            1
          ],
          "aString":[  
            "The force is great in o2r."
          ]
        }
        
    files_complex_1:
      summary: Complex data type example
      description: |
        Lists are be nested objects, and vectors are JSON arrays (see jsonlite docs for details, defaults are used):

        `GET /api/v1/inspection/<compendium id>?file=complex.Rdata`
      value: |
        {  
          "characterVector":[  
            "one",
            "two",
            "3"
          ],
          "logicalVector":[  
            true,
            true,
            false
          ],
          "numericVector":[  
            1,
            2,
            -7,
            0.8
          ],
          "orderedList":{  
            "name":[  
              "Fred"
            ],
            "mynumbers":[  
              1,
              2
            ],
            "age":[  
              5.3
            ]
          }
        }
        
    files_complex_2:
      summary: Complex data type example
      description: |
        Data frames and matrices are mapped to JSON arrays of complex objects (see jsonlite docs for details, defaults are used):

        `GET /api/v1/inspection/<compendium id>?file=matrices.Rdata`
      value: |
        {  
          "dataFrame":[  
            {  
              "ID":1,
              "Passed":true,
              "Colour":"red"
            },
            {  
              "ID":2,
              "Passed":true,
              "Colour":"white"
            },
            {  
              "ID":3,
              "Passed":true,
              "Colour":"red"
            },
            {  
              "ID":4,
              "Passed":false
            }
          ],
          "namedMatrix":[  
            [  
              1,
              26
            ],
            [  
              24,
              68
            ]
          ]
        }
      
    files_objects_errors:
      summary: Example with objects error
      description: |
        If selected objects are not loadable from the file, an errors property in the response is given for each problematic object:

        `GET /api/v1/inspection/<compendium id>?file=simple.RData&objects=bar,anInteger,foo`

      value: |
        {  
          "anInteger":[  
            1
          ],
          "errors":[  
            "Error: Object 'bar' does not exist in the file simple.RData",
            "Error: Object 'foo' does not exist in the file simple.RData"
          ]
        }
        
    files_bad_request_1:
      summary: Parameter missing
      value: {"error": "Query parameter 'file' missing"}
      
    files_bad_request_2:
      summary: File does not exists
      value: {"error": "file 'not_available.Rdata' does not exist in compendium kOSMO"}
      
    files_bad_request_3:
      summary: Compendium does not exists
      value: {"error": "compendium '12345' does not exist"}
      
    files_server_error:
      summary: Internal Server Error
      value: {"error": "Error loading objects"}
    
    ##Job Response Examples
    job_success:
      summary: A successfull job creation
      description: Returns the id of the new job
      value: {"job_id":"ngK4m"}
    
    job_server_error:
      summary: A internal server error during job creation
      description: Returns an error
      value: {"error":"could not create job"}
    
    job_list_simple:
      summary: A job listing with only the job ids
      description: |
        `GET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&status=success`
      value: |
        {
          "results": [
            "nkm4L",
            "asdi5",
            "nb2sg",
            …
          ]
        }
        
    job_list_expanded:
      summary: A job listing with job id and status
      description: |
        The overall job state can be added to the job list response:

        `GET /api/v1/job?limit=100&start=2&compendium_id=a4Dnm&status=success&fields=status`
      value: | 
        {
          "results": [
            {
              "id":"nkm4L",
              "status":"failure"
            },
            {
              "id":"asdi5",
              "status":"success"
            },
            {
              "id":"nb2sg",
              "status":"running"
            },
            …
          ]
        }
        
    job_list_fail: 
      summary: Job listing with no matching jobs
      description: |
        If there are no jobs, the returned list is empty.
      value: |
        {
          "results": [ ]
        }
   
    view_job_success:
      summary:  A successfull job view example
      value: |
        {
          "id":"UMmJ7",
          "compendium_id":"BSgxj",
          "steps":{
            "validate_bag":{
              "status":"skipped",
              "text":[
                "Not a bag"
              ],
              "end":"2017-11-17T13:22:48.105Z",
              "start":"2017-11-17T13:22:48.105Z"
            },
            "generate_configuration":{
              "status":"success",
              "text":[
                "configuration file not found, generating it...",
                "Saved configuration file to job and compendium"
              ],
              "end":"2017-11-17T13:22:48.119Z",
              "start":"2017-11-17T13:22:48.113Z"
            },
            "validate_compendium":{
              "status":"success",
              "text":[
                "all checks passed"
              ],
              "end":"2017-11-17T13:22:48.127Z",
              "start":"2017-11-17T13:22:48.125Z"
            },
            "generate_manifest":{
              "status":"success",
              "text":[
                /* abbreviated */
                "INFO [2017-11-17 13:22:56] Going online? TRUE  ... to retrieve system dependencies (sysreq-api)",
                "INFO [2017-11-17 13:22:56] Trying to determine system requirements for the package(s) 'knitr, backports, magrittr, rprojroot, htmltools, yaml, Rcpp, stringi, rmarkdown, stringr, digest, evaluate' from sysreq online DB",
                "INFO [2017-11-17 13:22:58] Adding CRAN packages: backports, digest, evaluate, htmltools, knitr, magrittr, Rcpp, rmarkdown, rprojroot, stringi, stringr, yaml",
                "INFO [2017-11-17 13:22:58] Created Dockerfile-Object based on /erc/main.Rmd",
                "INFO [2017-11-17 13:22:58] Writing dockerfile to /erc/Dockerfile",
                /* abbreviated */
                "generated manifest"
              ],
              "manifest":"Dockerfile",
              "end":"2017-11-17T13:22:58.865Z",
              "start":"2017-11-17T13:22:48.129Z"
            },
            "image_prepare":{
              "status":"success",
              "text":[
                "payload with 756224 total bytes created"
              ],
              "end":"2017-11-17T13:22:58.906Z",
              "start":"2017-11-17T13:22:58.875Z"
            },
            "image_build":{
              "status":"success",
              "text":[
                "Step 1/6 : FROM rocker/r-ver:3.4.2",
                "---> 3cf05960bf30",
                /* abbreviated */
                "---> Running in eb7ccd432592",
                "---> 84db129215f6",
                "Removing intermediate container eb7ccd432592",
                "Successfully built 84db129215f6",
                "Successfully tagged erc:UMmJ7"
              ],
              "end":"2017-11-17T13:22:59.899Z",
              "start":"2017-11-17T13:22:58.912Z"
            },
            "image_execute":{
              "status":"success",
              "text":[
                "[started image execution]",
                /* abbreviated */
                "Output created: display.html\r\n> \r\n>",
                "[finished image execution]"
              ],
              "statuscode":0,
              "start":"2017-11-17T13:22:59.904Z"
            },
            "check":{
              "status":"failure",
              "text":[
                "Check failed"
              ],
              "images":[
                {
                  "imageIndex":0,
                  "resizeOperationCode":0,
                  "compareResults":{
                    "differences":204786,
                    "dimension":1290240
                  }
                }
              ],
              "display":{
                "diff":"/api/v1/job/UMmJ7/data/check.html"
              },
              "errors":[ ],
              "checkSuccessful":false,
              "end":"2017-11-17T13:23:04.439Z",
              "start":"2017-11-17T13:23:03.479Z"
            },
            "image_save": {
              "status": "success",
              "text": [
                "[Saving image tarball file]",
                "[Saved image tarball to file (size: 875.14 MB)]"
              ],
              "start": "2018-01-29T17:38:55.111Z",
              "file": "image.tar",
              "end": "2018-01-29T17:39:36.845Z"
            },
            "cleanup":{
              "status":"success",
              "text":[
                "Running regular cleanup",
                "Removed image with tag erc:UMmJ7: [{\"Untagged\":\"erc:UMmJ7\"},{\"Deleted\":\"sha256:84db129215f60f805320e0f70c54a706b6e4030f4627c74abfb1e17f287fefa8\"},{\"Deleted\":\"sha256:0dc5b951dc58a10e50ea42dd14a1cd59b080199d9ca40cadd0a4fc8ae5e0d139\"},{\"Deleted\":\"sha256:ea88669b92a1c67dc2825f9f6d90d334a6032882d3d31bc85671afbd04adaa70\"}]",
                "Deleted temporary payload file."
              ],
              "end":"2017-11-17T13:23:05.592Z",
              "start":"2017-11-17T13:23:04.575Z"
            }
          },
          "status":"failure",
          "files":{ /* see compendium */  }
        }
        
    compendium_list_job_success:
      summary: A job listing with all related execution jobs
      value: |
        {
          "results": [
            "nkm4L",
            "asdi5",
            "nb2sg",
            …
          ]
        }
    
    ##Recipient Examples
    recipient_success:
      summary: A successfull reciepent listing
      value: |
        {
            "recipients": [{
                "id": "download",
                "label": "Download"
            }, {
                "id": "b2share_sandbox",
                "label": "Eudat b2share Sandbox"
            }, {
                "id": "zenodo_sandbox",
                "label": "Zenodo Sandbox"
            }]
        }
        
    ##Shipment Examples
    shipment_success:
      summary: A successfull listing of shipments
      description: Returns a JSON array with all shipment ids
      value: ["dc351fc6-314f-4947-a235-734ab5971eff", "..."]
    
    view_shipment_success:
      summary: A successfull view of a shipment
      description: | 
        Retruns a JSON object with information on the specified shipment.
        <div class="note blue_note">
          <p><b>&#x26A0; Note</b></p>
          <p>Returned deposition URLs (property `deposition_url`) from Zenodo as well as Eudat b2share (records) will only be functional after publishing.</p>
        </div>
      value: |
        {
          "last_modified": "2016-12-12 10:34:32.001475",
          "recipient": "zenodo",
          "id": "dc351fc6-314f-4947-a235-734ab5971eff",
          "deposition_id": "63179",
          "user": "0000-0002-1825-0097",
          "status": "shipped",
          "compendium_id": "4XgD97",
          "deposition_url": "https://zenodo.org/record/63179"
        }
        
    upload_shipment_success:
      summary: A successfull creation of a shipment
      value: |
        {
          "id": "9ff3d75e-23dc-423e-a6c6-6987ac5ffc3e",
          "recipient": "zenodo",
          "status": "shipped",
          "deposition_id": "79102"
        }
    
    upload_shipment_zip:
      summary: Zip stream for download
      value: (zip stream starting point)
        
    shipment_status_success:
      summary: A successfull status view of a shipment
      value: |
        {
          "id": "9ff3d75e-23dc-423e-a6c6-6987ac5ffc3e",
          "status": "shipped"
        }
        
    publish_put_success:
      summary: A successfull pulishment 
      value: |
        {
          "id": "9ff3d75e-23dc-423e-a6c6-6987ac5ffc3e",
          "status": "published"
        }
        
    shipment_files_success:
      summary: A successfull listing of the depositon files
      value: |
        {
          "files": [{
              "filesize": 393320,
              "id": "bae2a60c-bd59-47e1-a443-b34bb7d0a981",
              "filename": "4XgD9.zip",
              "checksum": "702f4db3e53b22176d1d5ddcda462a27",
              "links": {
                  "self": "https://sandbox.zenodo.org/api/deposit/depositions/71552/files/bae2a60c-bd59-47e1-a443-b34bb7d0a981",
                  "download": "https://sandbox.zenodo.org/api/files/31dc8f3d-df00-4d8a-bd99-64ef341372b3/4XgD9.zip"
              }
          }]
        }
        
        
    ##Substitute Examples
    substitution_request_body:
      summary: Request body for a new substitution.
      value: {"base": "G92NL", "overlay": "9fCTR", "substitutionFiles": [{"base": "climate-timeseries.csv","overlay": "mytimeseries_data.csv"}],"metadataHandling": "keepBase"}
    
    substitution_creation_success:
      summary: Successfull Substitution Creation
      value: {"id": "oMMFn"}

    substitution_unauthorized_1:
      summary: Unauthorized due to not being authenticated
      value: {"error":"not authenticated"}
      
    substitution_unauthorized_2:
      summary: Unauthorized due to not being allowed this action
      value: {"error":"not allowed"}
      
    substitution_not_found_1:
      summary: Base compendium not found
      value: {"error":"base compendium not found"}
      
    substitution_not_found_2:
      summary: Overlay compendium not found
      value: {"error":"overlay compendium not found"}
    
    substitution_list_success:
      summary: A successfull basic listing of substitutes
      description: The result is a list of compendia ids which were created by a substitution process.
      value: {
                "results": [
                  "oMMFn",
                  "asdi5",
                  "nb2sg",
                  …
                ]
              }
              
    substitution_list_fail:
      summary: No substitutes found
      description: If there are no substitutions yet, the returned list is empty.
      value:  {
                "results": [ ]
              }
              
    substitution_list_base:
      summary: Filter by base
      description: |
        `curl https://.../api/v1/substitution?base=jfL3w`

        `GET /api/v1/substitution?base=jfL3w`
        
        Result is a list of substituted compendia based on the given base compendium.
      value:  {
                "results": [
                  "wGmFn",
                  …
                ]
              }
              
    substitution_list_overlay:
      summary: Filter by overlay
      description: |
        `curl https://.../api/v1/substitution?overlay=as4Kj`

        `GET /api/v1/substitution?overlay=as4Kj`
        
        Result is a list of substituted compendia based on the given overlay compendium.
      value: 
        {
          "results": [
            "9pQ34",
            "1Tnd3",
            …
          ]
        } 
        
    substitution_list_base_overlay:
      summary: Filter by base and overlay
      description: |
        `curl https://.../api/v1/substitution?base=lO3Td&overlay=as4Kj`

        `GET /api/v1/substitution?base=lO3Td&overlay=as4Kj`
        
        Result is a list of substituted compendia based on the given base and overlay compendium.
      value: 
        {
          "results": [
            "9pQ34",
            "1Tnd3",
            …
          ]
        } 
        
    substitution_undefined_1:
      summary: Base compendium undefined
      value: {"error":"base compendium undefined"}
    
    substitution_undefined_2:
      summary: Overlay compendium undefined
      value: {"error":"Overlay compendium undefined"}
    
    ##Link examples
    link_success:
      summary: A successfull link creation
      description: |
        The response has an HTTP status of `200` if the public link was created.
        The response body provides the public link `id`, which can be used for subsequent requests to:
        
        - view the candidate compendium
        - download candidate compendium files
        - start jobs for the candidate compendium
        
        Only **1 public link** is created per candidate compendium.
        _Subsequent requests will return the same link._
        
      value: 
        id: lSaOCqxmNEO8Og42a0ONVRYUVoDWeBLr
        compendium_id: xkjzY
        user: 0000-0002-1701-2564
             
    link_list_success:
      summary: Successfull listing of links
      value:
        results:
          - id: b56Cy5EG7oiCBPCZMjXIPXoSyPVxiGVA
            compendium_id: eENFZ
            user: 0000-0002-1701-2564
          - id: p6s3GGn6EaDoZXM8jOWuNd5E1lHKPVRt
            compendium_id: xkjzY
            user: 0000-0002-1701-2564
      
    ##User examples
    user_list_success:
      summary: A successfull listing of users
      description: Returns a JSON object with user ids.
      value: 
        results:
               - 0000-0002-1825-0097
               - 0000-0002-1825-0097
             
    user_list_fail:
      summary: No users found
      description: |
        If there are no users, the returned list is empty.
      value: {"results": []}
    
    user_list_bad_request:
      summary: Bad Request due to limit
      value: 
        error: limit must be larger than 0
        
    user_view_simple:
      summary: User id and name
      value: 
        id: 0000-0002-1825-0097
        name: o2r
             
    user_view_expanded:
      summary: Expanded user information
      description: |
        The content of the response depends on the state and level of the user that requests the resource. The above response only contains the id and the publicly visible name. The following response contains more details and requires a certain user level of the authenticated user making the request:

        `curl --cookie "connect.sid=<session cookie here>" https://…/api/v1/user/0000-0002-1825-0097`
      value:
        id: 0000-0002-1825-0097
        name: o2r
        level: 0
        lastseen: '2016-08-15T12:32:23.972Z'
        
    user_not_found:
      summary: User not found
      value:
        error: no user with this id
    
    user_edit_response:
      summary: A successfull edit of a user
      description: |
        `curl --request PATCH --cookie "connect.sid=<session cookie here>"` \
        `https://…/api/v1/user/0000-0002-1825-0097?level=42`
      value:
        id: 0000-0002-1825-0097
        name: o2r
        level: 42
        lastseen: '2016-08-15T12:32:23.972Z'
        
    user_edit_forbidden: 
      summary: User edit forbidden
      value: 
        error: user level does not allow edit
        
    user_edit_bad_request:
      summary: bad request due to level parameter
      value:
        error: parameter 'level' could not be parsed as an integer
      
    user_whoami_success:
      summary: A successfull whoami request
      value:
        orcid: 0000-0002-1825-0097
        name: o2r
        
    ##General Response Examples
    bad_request_content_type:
      summary: A bad request due to content_type
      value: {'error':'provided content_type not implemented'}
      
    unauthorized:
      summary: A unthorized error example
      value: {'error':'user is not authenticated'}


  securitySchemes:
    cookie_authenification:
      type: apiKey
      in: cookie
      name: connect.sid

security: []
tags:
  - name: Users
    description: |
      ## User levels

      Users are authenticated via OAuth and the actions on the website are limited by the `level` associated with an account.
      On registration, each account is assigned a level `0`.
      Only admin users and the user herself can read the level of a user.
      
      The following is a list of actions and the corresponding required _minimum_ user level.
      
      - `0` _Users_ (everybody)
          - Create new jobs
          - View compendia, jobs, user details
      - `100` _Known users_
          - Create new compendium
          - Create shipments
          - Create substitutions
          - Delete own candidates
      - `500` _Editors_
          - Edit user levels up to own level
          - Edit compendium metadata
          - Delete candidates
          - Manage [public links](../compendium/link.md) for candidates
      - `1000` _Admins_
          - Edit user levels up to own level
          - Delete compendia and candidates
          - View status pages of microservices
      
      ##  User authentication

      User authentication is done via authenticated sessions, which are referenced with a cookie called `connect.sid`. For every endpoint that needs user authentication, a cookie with an authenticated session is required.
      
      ### Client authentication
      
      To execute restricted operations of the API, such as [compendium upload]() or [job execution](), a client must provide an authentication token via a cookie.
      
      A client must first login on the website to access a browser cookie issued by `o2r.uni-muenster.de` with the name `connect.sid`.
      Provide the content of the cookie when making requests to the API as shown in the request example below.
      
      ### Access authentication information for direct API access
      
      To run commands which require authentication from the command line, a user must login on the website first.
      Then open you browser cookies and find a cookie issued by `o2r.uni-muenster.de` with the name `connect.sid`.
      Use the the contents of the cookie for your requests, for example as shown below when using curl.
      
      ```bash
      curl [...] --cookie "connect.sid=<code string here>" \
           https://…/api/v1/endpoint
      ```
      
      ### Authentication within microservices
      
      **Attention:** The authentication process _requires_ a secured connection, i.e. `HTTPS`.
      
      ### Authentication provider
      
      Session authentication is done using the OAuth 2.0 protocol.
      Currently [ORCID](https://www.orcid.org) is the only available authentication provider, therefore users need to be registered with ORCID. Because of its nature, the authentication workflow is not a RESTful service.
      Users must follow the redirection to the login endpoint with their web browser and grant access to the o2r reproducibility service for their ORCID account.
      They are then sent back to our authentication service, which verifies the authentication request and enriches the user session with the verified ORCID for this user.
      
externalDocs:
  description: Find more info in our documentation.
  url: 'https://o2r.info/api/'
